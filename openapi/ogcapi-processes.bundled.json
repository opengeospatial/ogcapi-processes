{
  "openapi": "3.0.0",
  "info": {
    "version": "0.1",
    "title": "OGC API - Processes",
    "description": "Example API Definition for OGC API - Processes",
    "contact": {
      "name": "Open Geospatial Consortium",
      "email": "info@ogc.org"
    },
    "license": {
      "name": "OGC License",
      "url": "http://www.opengeospatial.org/legal/"
    }
  },
  "servers": [
    {
      "description": "Example Server 1 (GNOSIS, supporting Part 1: Core /Sync and Part 3: Workflows)",
      "url": "https://maps.gnosis.earth/ogcapi"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Landing Page"
        ],
        "operationId": "getLandingPage",
        "summary": "Retrieve the OGC API landing page for this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPage"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/conformance": {
      "get": {
        "tags": [
          "Conformance"
        ],
        "operationId": "getConformance",
        "summary": "Retrieve the set of OGC API conformance classes that are supported by this service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Conformance"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPI",
        "summary": "Retrieve this API definition.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/API"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/processes-list": {
      "get": {
        "tags": [
          "API"
        ],
        "operationId": "getAPIProcesses",
        "summary": "Retrieve the list of processes available from this API implementation & deployment.",
        "parameters": [
          {
            "$ref": "#/components/parameters/f-metadata"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Enumeration"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/processes": {
      "get": {
        "summary": "retrieve the list of available processes",
        "description": "The list of processes contains a summary of each process the OGC API - Processes offers, including the link to a more detailed description of the process.\n\nFor more information, see [Section 7.7]https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_list).\n",
        "operationId": "getProcesses",
        "tags": [
          "Processes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessList"
          }
        }
      },
      "post": {
        "summary": "deploy a process.",
        "description": "Deploys a process.\n\nFor more information, see [Section 6.3](http://docs.ogc.org/DRAFTS/20-044.html#_87a6983e-d060-458c-95ab-27e232e64822).\n",
        "operationId": "deploy",
        "tags": [
          "DRU"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/w"
          }
        ],
        "requestBody": {
          "description": "An OGC Application Package used to deploy a new process.",
          "required": true,
          "content": {
            "application/ogcapppkg+json": {
              "schema": {
                "$ref": "#/components/schemas/ogcapppkg"
              }
            },
            "application/cwl": {
              "schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "$author": "Francis Charette-Migneault <francis.charette.migneault@gmail.com>",
                "$id": "https://raw.githubusercontent.com/common-workflow-language/cwl-v1.2/1.2.1_proposed/json-schema/cwl.yaml",
                "$defs": {
                  "CWL": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLAtomic"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLGraph"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflow"
                      }
                    ]
                  },
                  "CWLKeywordList": {
                    "type": "array",
                    "title": "KeywordList",
                    "description": "Keywords applied to the process for search and categorization purposes.",
                    "items": {
                      "type": "string",
                      "title": "keyword",
                      "minLength": 1
                    }
                  },
                  "CWLTextPatternID": {
                    "$comment": "Identifier with text pattern that can allow additional non-ASCII characters depending on regex implementation.\nThe identifier allows a '#' or a relative 'sub/part#ref' prefix, to support references to other definitions\nin the CWL document, such as when using 'SchemaDefRequirement'.\n\nJSON spec regex does not include '\\w' in its default subset to allow all word-like unicode characters\n(see reference: https://json-schema.org/understanding-json-schema/reference/regular_expressions.html).\n\nSince support is implementation specific, add both the ASCII-only and '\\w' representation simultaneously\nand let the parser reading this document apply whichever is more relevant or supported\n(see discussion: https://github.com/common-workflow-language/cwl-v1.2/pull/256#discussion_r1234037814).\n",
                    "pattern": "^([A-Za-z0-9\\w]+(/[A-Za-z0-9\\w]+)*)?[#.]?[A-Za-z0-9\\w]+(?:[-_.][A-Za-z0-9\\w]+)*$",
                    "type": "string",
                    "description": "Generic identifier name pattern."
                  },
                  "CWLIdentifier": {
                    "anyOf": [
                      {
                        "type": "string",
                        "title": "UUID",
                        "description": "Unique identifier.",
                        "format": "uuid",
                        "pattern": "^[a-f0-9]{8}(?:-?[a-f0-9]{4}){3}-?[a-f0-9]{12}$"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTextPatternID"
                      }
                    ],
                    "title": "CWLIdentifier",
                    "description": "Reference to the process identifier."
                  },
                  "CWLIntent": {
                    "type": "array",
                    "title": "CWLIntent",
                    "items": {
                      "type": "string",
                      "title": "item",
                      "description": "Identifier URL to a concept for the type of computational operation accomplished by this process\n(see example operations: http://edamontology.org/operation_0004).\n",
                      "format": "url",
                      "pattern": "^((?:http|ftp)s?://)?(?!.*//.*$)(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?\\.)+(?:[A-Za-z]{2,6}\\.?|[A-Za-z0-9-]{2,}\\.?)|localhost|\\[[a-f0-9:]+\\]|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:/?|[/?]\\S+)$"
                    }
                  },
                  "CWLImport": {
                    "description": "Represents an '$import' directive that should point toward another compatible CWL file to import where specified.\nThe contents of the imported file should be relevant contextually where it is being imported.\n",
                    "$comment": "The schema validation of the CWL will not itself perform the '$import' to resolve and validate its contents.\nTherefore, the complete schema will not be validated entirely, and could still be partially malformed.\nTo ensure proper and exhaustive validation of a CWL definition with this schema, all '$import' directives\nshould be resolved and extended beforehand.\n",
                    "type": "object",
                    "properties": {
                      "$import": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "$import"
                    ],
                    "additionalProperties": false
                  },
                  "CWLRequirements": {
                    "title": "CWLRequirements",
                    "description": "Explicit requirement to execute the application package.",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirementsMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirementsList"
                      }
                    ]
                  },
                  "CWLRequirementsMap": {
                    "title": "CWLRequirementsMap",
                    "type": "object",
                    "properties": {
                      "cwltool:CUDARequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/cwltool%3ACUDARequirement"
                      },
                      "DockerRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/DockerRequirement"
                      },
                      "SoftwareRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SoftwareRequirement"
                      },
                      "ShellCommandRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ShellCommandRequirement"
                      },
                      "EnvVarRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/EnvVarRequirement"
                      },
                      "SchemaDefRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SchemaDefRequirement"
                      },
                      "InitialWorkDirRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InitialWorkDirRequirement"
                      },
                      "InlineJavascriptRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InlineJavascriptRequirement"
                      },
                      "InplaceUpdateRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InplaceUpdateRequirement"
                      },
                      "LoadListingRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/LoadListingRequirement"
                      },
                      "NetworkAccess": {
                        "$comment": "Not 'NetworkAccessRequirement'",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/NetworkAccessRequirement"
                      },
                      "ResourceRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceRequirement"
                      },
                      "ScatterFeatureRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ScatterFeatureRequirement"
                      },
                      "ToolTimeLimit": {
                        "$comment": "Not 'ToolTimeLimitRequirement'.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ToolTimeLimitRequirement"
                      },
                      "WorkReuse": {
                        "$comment": "Not 'WorkReuseRequirement'.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/WorkReuseRequirement"
                      },
                      "MultipleInputFeatureRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/MultipleInputFeatureRequirement"
                      },
                      "StepInputExpressionRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/StepInputExpressionRequirement"
                      },
                      "SubworkflowFeatureRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SubworkflowFeatureRequirement"
                      }
                    },
                    "additionalProperties": false
                  },
                  "DockerRequirement": {
                    "type": "object",
                    "title": "DockerRequirement",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "DockerRequirement"
                        ]
                      },
                      "dockerPull": {
                        "type": "string",
                        "title": "Docker pull reference",
                        "description": "Reference package that will be retrieved and executed by CWL.",
                        "example": "docker-registry.host.com/namespace/image:1.2.3"
                      },
                      "dockerImport": {
                        "type": "string"
                      },
                      "dockerLoad": {
                        "type": "string"
                      },
                      "dockerFile": {
                        "type": "string"
                      },
                      "dockerImageId": {
                        "type": "string"
                      },
                      "dockerOutputDirectory": {
                        "type": "string"
                      }
                    },
                    "oneOf": [
                      {
                        "required": [
                          "dockerPull"
                        ]
                      },
                      {
                        "required": [
                          "dockerImport"
                        ]
                      },
                      {
                        "required": [
                          "dockerLoad"
                        ]
                      },
                      {
                        "required": [
                          "dockerFile"
                        ]
                      }
                    ],
                    "additionalProperties": false
                  },
                  "InitialWorkDirListing": {
                    "title": "InitialWorkDirListing",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      {
                        "type": "array",
                        "title": "InitialWorkDirListingItems",
                        "items": {
                          "oneOf": [
                            {
                              "type": "null"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/DirectoryListingDirent"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/DirectoryListingFileOrDirectory"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/DirectoryListingFileOrDirectory"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "DirectoryListingFileOrDirectory": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "File",
                          "Directory"
                        ]
                      },
                      "location": {
                        "type": "string"
                      },
                      "checksum": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/Checksum"
                      },
                      "size": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "class",
                      "location"
                    ],
                    "additionalProperties": false
                  },
                  "DirectoryListingDirent": {
                    "$comment": "Called 'Dirent' in documentation.",
                    "type": "object",
                    "title": "DirectoryListingDirent",
                    "properties": {
                      "entry": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "entryname": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "writable": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "entry"
                    ],
                    "additionalProperties": false
                  },
                  "InitialWorkDirRequirement": {
                    "type": "object",
                    "title": "InitialWorkDirRequirement",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "InitialWorkDirRequirement"
                        ]
                      },
                      "listing": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InitialWorkDirListing"
                      }
                    },
                    "required": [
                      "listing"
                    ],
                    "additionalProperties": false
                  },
                  "InlineJavascriptLibObject": {
                    "type": "object",
                    "properties": {
                      "$include": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "$include"
                    ],
                    "additionalProperties": false
                  },
                  "InlineJavascriptLibItem": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InlineJavascriptLibObject"
                      }
                    ]
                  },
                  "InlineJavascriptLibraries": {
                    "type": "array",
                    "title": "InlineJavascriptLibraries",
                    "description": "Additional code fragments that will also be inserted before executing the expression code.\nAllows for function definitions that may be called from CWL expressions.\n",
                    "items": {
                      "title": "exp_lib",
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InlineJavascriptLibItem"
                    }
                  },
                  "InlineJavascriptRequirement": {
                    "type": "object",
                    "title": "InlineJavascriptRequirement",
                    "description": "Indicates that the workflow platform must support inline Javascript expressions.\n\nIf this requirement is not present, the workflow platform must not perform expression interpolation\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#InlineJavascriptRequirement).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "InlineJavascriptRequirement"
                        ]
                      },
                      "expressionLib": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InlineJavascriptLibraries"
                      },
                      "required": [
                        "expressionLib"
                      ]
                    },
                    "additionalProperties": false
                  },
                  "InplaceUpdateRequirement": {
                    "type": "object",
                    "title": "InplaceUpdateRequirement",
                    "description": "If 'inplaceUpdate' is true, then an implementation supporting this feature may permit tools to directly\nupdate files with 'writable: true' in 'InitialWorkDirRequirement'. That is, as an optimization,\nfiles may be destructively modified in place as opposed to copied and updated\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#InplaceUpdateRequirement).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "InplaceUpdateRequirement"
                        ]
                      },
                      "inplaceUpdate": {
                        "type": "boolean",
                        "title": "inplaceUpdate"
                      }
                    },
                    "required": [
                      "inplaceUpdate"
                    ],
                    "additionalProperties": false
                  },
                  "LoadListingEnum": {
                    "type": "string",
                    "title": "LoadListingEnum",
                    "enum": [
                      "no_listing",
                      "shallow_listing",
                      "deep_listing"
                    ]
                  },
                  "LoadListingRequirement": {
                    "type": "object",
                    "title": "LoadListingRequirement",
                    "description": "Specify the desired behavior for loading the listing field of a 'Directory' object for use by expressions\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#LoadListingRequirement).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "LoadListingRequirement"
                        ]
                      },
                      "loadListing": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/LoadListingEnum"
                      }
                    },
                    "required": [
                      "loadListing"
                    ],
                    "additionalProperties": false
                  },
                  "NetworkAccess": {
                    "title": "NetworkAccess",
                    "description": "Indicate whether a process requires outgoing IPv4/IPv6 network access.",
                    "example": true,
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ]
                  },
                  "NetworkAccessRequirement": {
                    "type": "object",
                    "title": "NetworkAccessRequirement",
                    "properties": {
                      "class": {
                        "type": "string",
                        "$comment": "Not 'NetworkAccessRequirement'",
                        "enum": [
                          "NetworkAccess"
                        ]
                      },
                      "networkAccess": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/NetworkAccess"
                      }
                    },
                    "required": [
                      "networkAccess"
                    ],
                    "additionalProperties": false
                  },
                  "CWLExpression": {
                    "$comment": "Whenever this option is applicable for a parameter, any other 'normal' string should not be specified.\nFor JSON schema validation, there is no easy way to distinguish them unless using complicated string patterns.\n",
                    "type": "string",
                    "title": "CWLExpression",
                    "description": "When combined with 'InlineJavascriptRequirement', this field allows runtime parameter references\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#Expression).\n"
                  },
                  "ResourceQuantityOrFractional": {
                    "description": "An item quantity that can also represent a proportion of use by resources.",
                    "$comment": "Technically should be minimum=1, but fractional for scheduling algorithms are allowed.\nThere is no way to distinguish between float/long simultaneously in JSON schema (multi-match oneOf).\nTherefore, only validate that it is greater than zero.\n",
                    "type": "number",
                    "exclusiveMinimum": 0,
                    "default": 1
                  },
                  "ResourceCoresMinimum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceCoresMinimum",
                    "summary": "Minimum reserved number of CPU cores.",
                    "description": "Minimum reserved number of CPU cores.\n\nMay be a fractional value to indicate to a scheduling algorithm that one core can be allocated to\nmultiple jobs. For example, a value of 0.25 indicates that up to 4 jobs\nmay run in parallel on 1 core. A value of 1.25 means that up to 3 jobs\ncan run on a 4 core system (4/1.25 ~ 3).\n\nProcesses can only share a core allocation if the sum of each of their 'ramMax', 'tmpdirMax', and\n'outdirMax' requests also do not exceed the capacity of the node.\n\nProcesses sharing a core must have the same level of isolation (typically a container\nor VM) that they would normally have.\n\nThe reported number of CPU cores reserved for the process, which is available to expressions \non the 'CommandLineTool' as 'runtime.cores', must be a non-zero integer, and may be calculated by\nrounding up the cores request to the next whole number.\n\nScheduling systems may allocate fractional CPU resources by setting quotas or scheduling weights.\nScheduling systems that do not support fractional CPUs may round up the request to the next whole number.\n",
                    "default": 1
                  },
                  "ResourceCoresMaximum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceCoresMaximum",
                    "summary": "Maximum reserved number of CPU cores.",
                    "description": "Maximum reserved number of CPU cores.\nSee 'coresMin' for discussion about fractional CPU requests.\n"
                  },
                  "ResourceRAMMinimum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceRAMMinimum",
                    "summary": "Minimum reserved RAM in mebibytes.",
                    "description": "Minimum reserved RAM in mebibytes (2**20).\n\nMay be a fractional value. If so, the actual RAM request must be rounded up\nto the next whole number.\n\nThe reported amount of RAM reserved for the process, which is available to\nexpressions on the 'CommandLineTool' as 'runtime.ram', must be a non-zero integer.\n",
                    "default": 256
                  },
                  "ResourceRAMMaximum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceRAMMaximum",
                    "summary": "Maximum reserved RAM in mebibytes.",
                    "description": "Maximum reserved RAM in mebibytes (2**20).\nSee 'ramMin' for discussion about fractional RAM requests.\n"
                  },
                  "ResourceTmpDirMinimum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceTmpDirMinimum",
                    "summary": "Minimum reserved filesystem based storage for the designated temporary directory in mebibytes.",
                    "description": "Minimum reserved filesystem based storage for the designated temporary\ndirectory in mebibytes (2**20).\n\nMay be a fractional value. If so, the actual storage request must be rounded\nup to the next whole number.\n\nThe reported amount of storage reserved for the process, which is available\nto expressions on the 'CommandLineTool' as 'runtime.tmpdirSize', must be a non-zero integer.\n",
                    "default": 1024
                  },
                  "ResourceTmpDirMaximum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceTmpDirMaximum",
                    "summary": "Maximum reserved filesystem based storage for the designated temporary directory in mebibytes.",
                    "description": "Maximum reserved filesystem based storage for the designated temporary directory in mebibytes (2**20).\nSee 'tmpdirMin' for discussion about fractional storage requests.\n"
                  },
                  "ResourceOutDirMinimum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceOutDirMinimum",
                    "summary": "Minimum reserved filesystem based storage for the designated output directory in mebibytes.",
                    "description": "Minimum reserved filesystem based storage for the designated output\ndirectory in mebibytes (2**20).\n\nMay be a fractional value. If so, the actual storage request must be rounded\nup to the next whole number.\n\nThe reported amount of storage reserved for the process, which is available\nto expressions on the 'CommandLineTool' as 'runtime.outdirSize', must be a non-zero integer.\n",
                    "default": 1024
                  },
                  "ResourceOutDirMaximum": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceQuantityOrFractional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "ResourceOutDirMaximum",
                    "summary": "Maximum reserved filesystem based storage for the designated output directory in mebibytes.",
                    "description": "Maximum reserved filesystem based storage for the designated output\ndirectory in mebibytes (2**20).\nSee 'outdirMin' for discussion about fractional storage requests.\n",
                    "default": 1
                  },
                  "ResourceRequirement": {
                    "type": "object",
                    "title": "ResourceRequirement",
                    "description": "Specify basic hardware resource requirements\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#ResourceRequirement).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "ResourceRequirement"
                        ]
                      },
                      "coresMin": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceCoresMinimum"
                      },
                      "coresMax": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceCoresMaximum"
                      },
                      "ramMin": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceRAMMinimum"
                      },
                      "ramMax": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceRAMMaximum"
                      },
                      "tmpdirMin": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceTmpDirMinimum"
                      },
                      "tmpdirMax": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceTmpDirMaximum"
                      },
                      "outdirMin": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceOutDirMinimum"
                      },
                      "outdirMax": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceOutDirMaximum"
                      }
                    },
                    "additionalProperties": false
                  },
                  "Scatter": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTextPatternID"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/IdentifierArray"
                      }
                    ],
                    "title": "Scatter",
                    "description": "The scatter field specifies one or more input parameters which will be scattered.\n\nAn input parameter may be listed more than once. The declared type of each\ninput parameter implicitly becomes an array of items of the input parameter type.\nIf a parameter is listed more than once, it becomes a nested array. As a result,\nupstream parameters which are connected to scattered parameters must be arrays.\n\nAll output parameter types are also implicitly wrapped in arrays. Each job\nin the scatter results in an entry in the output array.\n\nIf any scattered parameter runtime value is an empty array, all outputs are\nset to empty arrays and no work is done for the step, according to applicable scattering rules.\n"
                  },
                  "IdentifierArray": {
                    "type": "array",
                    "title": "IdentifierArray",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTextPatternID"
                    },
                    "minItems": 1
                  },
                  "ScatterFeatureRequirement": {
                    "type": "object",
                    "title": "ScatterFeatureRequirement",
                    "description": "A 'scatter' operation specifies that the associated Workflow step should execute separately over a list of\ninput elements. Each job making up a scatter operation is independent and may be executed concurrently\n(see also: https://www.commonwl.org/v1.2/Workflow.html#WorkflowStep).\n",
                    "$comment": "Fields 'scatter' and 'scatterMethod' at the root of a 'WorkflowStep', not within the requirement.",
                    "properties": {
                      "class": {
                        "type": "string",
                        "description": "CWL requirement class specification.",
                        "enum": [
                          "ScatterFeatureRequirement"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "MultipleInputFeatureRequirement": {
                    "type": "object",
                    "title": "MultipleInputFeatureRequirement",
                    "description": "Indicates that the 'Workflow' must support multiple inbound data links listed in the 'source'\nfield of 'WorkflowStepInput'.\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "description": "CWL requirement class specification.",
                        "enum": [
                          "MultipleInputFeatureRequirement"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "StepInputExpressionRequirement": {
                    "type": "object",
                    "title": "StepInputExpressionRequirement",
                    "description": "Indicates that the 'Workflow' must support the 'valueFrom' field of 'WorkflowStepInput'.",
                    "properties": {
                      "class": {
                        "type": "string",
                        "description": "CWL requirement class specification.",
                        "enum": [
                          "StepInputExpressionRequirement"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "SubworkflowFeatureRequirement": {
                    "type": "object",
                    "title": "SubworkflowFeatureRequirement",
                    "description": "Indicates that the 'Workflow' must support nested workflows in the 'run' field of 'WorkflowStep'.",
                    "properties": {
                      "class": {
                        "type": "string",
                        "description": "CWL requirement class specification.",
                        "enum": [
                          "SubworkflowFeatureRequirement"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "CWLFileOnlyParameters": {
                    "type": "object",
                    "properties": {
                      "secondaryFiles": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordSecondaryFiles"
                      },
                      "streamable": {
                        "type": "boolean"
                      },
                      "format": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLFormat"
                      },
                      "loadContents": {
                        "type": "boolean"
                      }
                    }
                  },
                  "CWLFileOnlyParametersConditional": {
                    "description": "Parameters that are only valid when 'type' or 'items' evaluates to 'File'.",
                    "$comment": "Explicitly disallow these parameters when non-File type is detected.\nOtherwise, validate their schema definitions according to what is permitted.\n",
                    "type": "object",
                    "if": {
                      "properties": {
                        "oneOf": [
                          {
                            "$comment": "Single required or optional 'File'.",
                            "type": {
                              "enum": [
                                "File",
                                "File?",
                                "File[]",
                                "File[]?"
                              ]
                            }
                          },
                          {
                            "$comment": "Array of required or optional 'File'.",
                            "type": {
                              "const": "array"
                            },
                            "items": {
                              "oneOf": [
                                {
                                  "type": [
                                    {
                                      "const": "File"
                                    },
                                    {
                                      "const": "File?"
                                    }
                                  ]
                                },
                                {
                                  "type": "array",
                                  "contains": {
                                    "type": [
                                      {
                                        "const": "File"
                                      },
                                      {
                                        "const": "File?"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "then": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLFileOnlyParameters"
                    },
                    "else": {
                      "not": {
                        "properties": {
                          "secondaryFiles": {},
                          "streamable": {},
                          "format": {},
                          "loadContents": {}
                        }
                      }
                    }
                  },
                  "CWLDirectoryOnlyParameters": {
                    "type": "object",
                    "properties": {
                      "loadListing": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/LoadListingEnum"
                      }
                    }
                  },
                  "CWLDirectoryOnlyParametersConditional": {
                    "description": "Parameters that are only valid when 'type' or 'items' evaluates to 'Directory'.",
                    "$comment": "Explicitly disallow these parameters when non-Directory type is detected.\nOtherwise, validate their schema definitions according to what is permitted.\n",
                    "type": "object",
                    "if": {
                      "properties": {
                        "oneOf": [
                          {
                            "$comment": "Single required or optional 'Directory'.",
                            "type": {
                              "enum": [
                                "Directory",
                                "Directory?",
                                "Directory[]",
                                "Directory[]?"
                              ]
                            }
                          },
                          {
                            "$comment": "Array of required or optional 'Directory'.",
                            "type": {
                              "const": "array"
                            },
                            "items": {
                              "oneOf": [
                                {
                                  "type": [
                                    {
                                      "const": "Directory"
                                    },
                                    {
                                      "const": "Directory?"
                                    }
                                  ]
                                },
                                {
                                  "type": "array",
                                  "contains": {
                                    "type": [
                                      {
                                        "const": "Directory"
                                      },
                                      {
                                        "const": "Directory?"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "then": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDirectoryOnlyParameters"
                    },
                    "else": {
                      "not": {
                        "properties": {
                          "loadListing": {}
                        }
                      }
                    }
                  },
                  "CWLTypeRecordSecondaryFileSchema": {
                    "type": "object",
                    "properties": {
                      "pattern": {
                        "$comment": "Either an expression or the regex pattern directly.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "required": {
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                          }
                        ]
                      }
                    },
                    "required": [
                      "pattern"
                    ],
                    "additionalProperties": false
                  },
                  "CWLTypeRecordSecondaryFiles": {
                    "oneOf": [
                      {
                        "$comment": "Either an expression or the regex pattern directly.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordSecondaryFileSchema"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$comment": "Either an expression or the regex pattern directly.",
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                        }
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordSecondaryFileSchema"
                        }
                      }
                    ]
                  },
                  "CWLTypeRecordFieldDefBase": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "$comment": "Required if list item. Otherwise, optional since it is the mapping key.\nThis requirement is defined in 'CWLTypeRecordFieldsItem' to allow reuse of this schema.\n",
                        "type": "string"
                      },
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "CWLTypeRecordFieldDef": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldDefBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLFileOnlyParametersConditional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDirectoryOnlyParametersConditional"
                      }
                    ]
                  },
                  "CWLTypeRecordFieldsMap": {
                    "type": "object",
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldDef"
                        }
                      ]
                    }
                  },
                  "CWLTypeRecordFieldsItem": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldDef"
                      },
                      {
                        "required": [
                          "name"
                        ]
                      }
                    ]
                  },
                  "CWLTypeRecordFieldsList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldsItem"
                    }
                  },
                  "CWLTypeRecordFields": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldsMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFieldsList"
                      }
                    ]
                  },
                  "CWLTypeRecordSchema": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "record"
                        ]
                      },
                      "fields": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordFields"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "CWLTypeRecordArray": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "array"
                        ]
                      },
                      "items": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                      }
                    },
                    "required": [
                      "type",
                      "items"
                    ]
                  },
                  "SchemaDefRequirement": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "SchemaDefRequirement"
                        ]
                      },
                      "types": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeEnum"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordSchema"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordArray"
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "types"
                    ],
                    "additionalProperties": false
                  },
                  "SoftwarePackageSpecs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "SoftwarePackage": {
                    "type": "object",
                    "properties": {
                      "package": {
                        "type": "string"
                      },
                      "version": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "specs": {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ReferenceURL"
                        }
                      }
                    },
                    "required": [
                      "package"
                    ],
                    "additionalProperties": false
                  },
                  "SoftwareRequirement": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "SoftwareRequirement"
                        ]
                      },
                      "packages": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SoftwarePackage"
                            }
                          },
                          {
                            "type": "object",
                            "description": "Mapping of 'package' name to its specifications.",
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SoftwarePackageSpecs"
                                },
                                {
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SoftwarePackage"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "required": [
                      "packages"
                    ],
                    "additionalProperties": false
                  },
                  "ShellCommandRequirement": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "ShellCommandRequirement"
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "EnvironmentDef": {
                    "type": "object",
                    "properties": {
                      "envName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "envValue": {
                        "type": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                        }
                      }
                    },
                    "required": [
                      "envName",
                      "envValue"
                    ],
                    "additionalProperties": false
                  },
                  "EnvVarRequirement": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "EnvVarRequirement"
                        ]
                      },
                      "envDef": {
                        "oneOf": [
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/EnvironmentDef"
                            }
                          },
                          {
                            "type": "object",
                            "description": "Mapping of 'envName' to environment value or definition.",
                            "additionalProperties": {
                              "oneOf": [
                                {
                                  "description": "The 'envValue' specified directly",
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                                },
                                {
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/EnvironmentDef"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "required": [
                      "envDef"
                    ],
                    "additionalProperties": false
                  },
                  "TimeLimitValue": {
                    "oneOf": [
                      {
                        "type": "number",
                        "minimum": 0
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "TimeLimitValue",
                    "description": "The time limit, in seconds.\n\nA time limit of zero means no time limit.\nNegative time limits are an error.\n"
                  },
                  "ToolTimeLimitRequirement": {
                    "type": "object",
                    "title": "ToolTimeLimitRequirement",
                    "description": "Set an upper limit on the execution time of a CommandLineTool.\n\nA CommandLineTool whose execution duration exceeds the time limit may be preemptively\nterminated and considered failed. May also be used by batch systems to make scheduling decisions.\n\nThe execution duration excludes external operations, such as staging of files,\npulling a docker image etc., and only counts wall-time for the execution of the command line itself.\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "$comment": "not 'ToolTimeLimitRequirement'",
                        "enum": [
                          "ToolTimeLimit"
                        ]
                      },
                      "timelimit": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/TimeLimitValue"
                      }
                    },
                    "required": [
                      "timelimit"
                    ],
                    "additionalProperties": false
                  },
                  "EnableReuseValue": {
                    "oneOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    ],
                    "title": "EnableReuseValue",
                    "description": "Indicates if reuse is enabled for this tool.\n\nCan be an expression when combined with 'InlineJavascriptRequirement'\n(see also: https://www.commonwl.org/v1.2/CommandLineTool.html#Expression).\n"
                  },
                  "WorkReuseRequirement": {
                    "type": "object",
                    "title": "WorkReuseRequirement",
                    "description": "For implementations that support reusing output from past work\n(on the assumption that same code and same input produce same results),\ncontrol whether to enable or disable the reuse behavior for a particular tool\nor step (to accommodate situations where that assumption is incorrect).\n\nA reused step is not executed but instead returns the same output as the original execution.\n\nIf 'WorkReuse' is not specified, correct tools should assume it is enabled by default.\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "$comment": "Not 'WorkReuseRequirement'.",
                        "enum": [
                          "WorkReuse"
                        ]
                      },
                      "enableReuse": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/EnableReuseValue"
                      }
                    },
                    "required": [
                      "enableReuse"
                    ],
                    "additionalProperties": false
                  },
                  "UnknownRequirement": {
                    "type": "object",
                    "description": "Generic schema to allow alternative CWL requirements/hints not explicitly defined in schemas.",
                    "properties": {
                      "class": {
                        "type": "string",
                        "title": "Requirement Class Identifier",
                        "description": "CWL requirement class specification.",
                        "example": "UnknownRequirement",
                        "not": {
                          "enum": [
                            "cwltool:CUDARequirement",
                            "DockerRequirement",
                            "SoftwareRequirement",
                            "ShellCommandRequirement",
                            "EnvVarRequirement",
                            "SchemaDefRequirement",
                            "InitialWorkDirRequirement",
                            "InlineJavascriptRequirement",
                            "InplaceUpdateRequirement",
                            "LoadListingRequirement",
                            "NetworkAccess",
                            "ResourceRequirement",
                            "ScatterFeatureRequirement",
                            "ToolTimeLimit",
                            "WorkReuse",
                            "MultipleInputFeatureRequirement",
                            "StepInputExpressionRequirement",
                            "SubworkflowFeatureRequirement"
                          ]
                        }
                      }
                    },
                    "additionalProperties": {}
                  },
                  "CWLRequirementsList": {
                    "type": "array",
                    "title": "CWLRequirementsList",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "$comment": "When using the list representation, 'class' is required to indicate which one is being represented.\nWhen using the mapping representation, 'class' is optional since it's the key, but it must match by name.\n",
                              "required": [
                                "class"
                              ]
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirementsItem"
                            }
                          ]
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                        }
                      ]
                    }
                  },
                  "CWLRequirementsItem": {
                    "title": "CWLRequirementsItem",
                    "$comment": "For any new items added, ensure they are added under 'class' of 'UnknownRequirement' as well.\nOtherwise, insufficiently restrictive classes could cause multiple matches, failing the 'oneOf' condition.\n",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/cwltool%3ACUDARequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/DockerRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SoftwareRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ShellCommandRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/EnvVarRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SchemaDefRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InitialWorkDirRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InlineJavascriptRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InplaceUpdateRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/LoadListingRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/NetworkAccessRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ResourceRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ScatterFeatureRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ToolTimeLimitRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/WorkReuseRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/MultipleInputFeatureRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/StepInputExpressionRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/SubworkflowFeatureRequirement"
                      }
                    ]
                  },
                  "ScatterMethod": {
                    "type": "string",
                    "title": "scatterMethod",
                    "description": "If 'scatter' declares more than one input parameter, 'scatterMethod'\ndescribes how to decompose the input into a discrete set of jobs.\n\n- dotproduct: specifies that each of the input arrays are aligned and\n  one element taken from each array to construct each job. It is an\n  error if all input arrays are not the same length.\n\n- nested_crossproduct: specifies the Cartesian product of the inputs, producing \n  a job for every combination of the scattered inputs. The output must be nested \n  arrays for each level of scattering, in the order that the input arrays\n  are listed in the 'scatter' field.\n\n- flat_crossproduct: specifies the Cartesian product of the inputs, producing a \n  job for every combination of the scattered inputs. The output arrays must be \n  flattened to a single level, but otherwise listed in the order that the input \n  arrays are listed in the 'scatter' field.\n",
                    "default": "dotproduct",
                    "enum": [
                      "dotproduct",
                      "nested_crossproduct",
                      "flat_crossproduct"
                    ],
                    "required": [
                      "timelimit",
                      "class"
                    ],
                    "additionalProperties": false
                  },
                  "CWLHints": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHintsMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHintsList"
                      }
                    ],
                    "title": "CWLHints",
                    "description": "Non-failing additional hints that can help resolve extra requirements."
                  },
                  "CWLHintsMapExtras": {
                    "type": "object",
                    "properties": {
                      "BuiltinRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/BuiltinRequirement"
                      },
                      "OGCAPIRequirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/OGCAPIRequirement"
                      },
                      "WPS1Requirement": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/WPS1Requirement"
                      }
                    },
                    "additionalProperties": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/UnknownRequirement"
                    }
                  },
                  "CWLHintsMap": {
                    "title": "CWLHintsMap",
                    "anyOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirementsMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHintsMapExtras"
                      }
                    ]
                  },
                  "BuiltinRequirement": {
                    "type": "object",
                    "title": "BuiltinRequirement",
                    "description": "Hint indicating that the Application Package corresponds to a\nbuiltin process of this instance. (note: can only be an 'hint'\nas it is unofficial CWL specification).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "BuiltinRequirement"
                        ]
                      },
                      "process": {
                        "$comment": "Builtin process identifier.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTextPatternID"
                      }
                    },
                    "required": [
                      "process",
                      "class"
                    ],
                    "additionalProperties": false
                  },
                  "CUDAComputeCapability": {
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "CUDA compute capability",
                        "description": "The compute capability supported by the GPU hardware.",
                        "pattern": "^\\d+\\.\\d+$"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CUDAComputeCapabilityArray"
                      }
                    ],
                    "title": "CUDA compute capability",
                    "description": "The compute capability supported by the GPU hardware.\n\n* If this is a single value, it defines only the minimum compute capability.\n  GPUs with higher capability are also accepted.\n* If it is an array value, then only select GPUs with compute capabilities that explicitly\n  appear in the array.\n  See https://docs.nvidia.com/deploy/cuda-compatibility/#faq and\n  https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#cuda-compute-capability\n  for details.\n"
                  },
                  "CUDAComputeCapabilityArray": {
                    "type": "array",
                    "title": "CUDAComputeCapabilityArray",
                    "items": {
                      "type": "string",
                      "title": "CUDA compute capability",
                      "description": "The compute capability supported by the GPU hardware.",
                      "pattern": "^\\d+\\.\\d+$"
                    },
                    "minItems": 1
                  },
                  "cwltool:CUDARequirement": {
                    "type": "object",
                    "title": "cwltool:CUDARequirement",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "cwltool:CUDARequirement"
                        ]
                      },
                      "cudaVersionMin": {
                        "type": "string",
                        "title": "CUDA version minimum",
                        "description": "The minimum CUDA version required to run the software. This corresponds to a CUDA SDK release.\n\nWhen run in a container, the container image should provide the CUDA runtime,\nand the host driver is injected into the container.  In this case, because CUDA drivers\nare backwards compatible, it is possible to use an older SDK with a newer driver across major versions.\n\nSee https://docs.nvidia.com/deploy/cuda-compatibility/ for details.\n",
                        "example": "11.4",
                        "pattern": "^\\d+\\.\\d+$"
                      },
                      "cudaComputeCapability": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CUDAComputeCapability"
                      },
                      "cudaDeviceCountMin": {
                        "type": "integer",
                        "title": "CUDA device count minimum",
                        "description": "The minimum amount of devices required.",
                        "default": 1,
                        "example": 1,
                        "minimum": 1
                      },
                      "cudaDeviceCountMax": {
                        "type": "integer",
                        "title": "CUDA device count maximum",
                        "description": "The maximum amount of devices required.",
                        "default": 1,
                        "example": 8,
                        "minimum": 1
                      }
                    },
                    "required": [
                      "cudaVersionMin",
                      "cudaComputeCapability"
                    ],
                    "additionalProperties": false
                  },
                  "OGCAPIRequirement": {
                    "type": "object",
                    "title": "OGCAPIRequirement",
                    "description": "Hint indicating that the Application Package corresponds to an\nOGC API - Processes provider that should be remotely executed and monitored\nby this instance. (note: can only be an 'hint' as it is unofficial CWL specification).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "OGCAPIRequirement"
                        ]
                      },
                      "process": {
                        "description": "Process location.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ReferenceURL"
                      }
                    },
                    "required": [
                      "process"
                    ],
                    "additionalProperties": false
                  },
                  "WPS1Requirement": {
                    "type": "object",
                    "title": "WPS1Requirement",
                    "description": "Hint indicating that the Application Package corresponds to a\nWPS-1 provider process that should be remotely executed and monitored by this\ninstance. (note: can only be an ''hint'' as it is unofficial CWL specification).\n",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "WPS1Requirement"
                        ]
                      },
                      "process": {
                        "$comment": "Process identifier of the remote WPS provider.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTextPatternID"
                      },
                      "provider": {
                        "description": "WPS provider endpoint.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ReferenceURL"
                      }
                    },
                    "required": [
                      "process",
                      "provider"
                    ],
                    "additionalProperties": false
                  },
                  "CWLHintsList": {
                    "type": "array",
                    "title": "CWLHintsList",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "$comment": "When using the list representation, 'class' is required to indicate which one is being represented.\nWhen using the mapping representation, 'class' is optional since it's the key, but it must match by name.\n",
                              "required": [
                                "class"
                              ]
                            },
                            {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHintsItem"
                            }
                          ]
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                        }
                      ]
                    }
                  },
                  "CWLHintsItemExtras": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/BuiltinRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/OGCAPIRequirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/WPS1Requirement"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/UnknownRequirement"
                      }
                    ]
                  },
                  "CWLHintsItem": {
                    "title": "CWLHintsItem",
                    "$comment": "For any new items added, ensure they are added under 'class' of 'UnknownRequirement' as well.\nOtherwise, insufficiently restrictive classes could cause multiple matches, failing the 'oneOf' condition.\n",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirementsItem"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHintsItemExtras"
                      }
                    ]
                  },
                  "CWLCommand": {
                    "oneOf": [
                      {
                        "type": "string",
                        "title": "String command."
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CommandParts"
                      }
                    ],
                    "title": "CWLCommand",
                    "description": "Command called in the docker image or on shell according to requirements\nand hints specifications. Can be omitted if already defined in the docker\nimage.\n"
                  },
                  "CommandParts": {
                    "type": "array",
                    "title": "Command Parts",
                    "items": {
                      "type": "string",
                      "title": "cmd"
                    },
                    "additionalProperties": false
                  },
                  "CWLArguments": {
                    "type": "array",
                    "title": "CWLArguments",
                    "description": "Base arguments passed to the command.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InputBinding"
                        }
                      ]
                    }
                  },
                  "CWLInputStdInDefinition": {
                    "description": "Indicates that the value passed to this CWL input will be redirected to the standard input stream of the command.\nCan be defined for only one input and must not be combined with 'stdin' at the root of the CWL document.\n",
                    "type": "string",
                    "enum": [
                      "stdin"
                    ]
                  },
                  "CWLInputStdInObjectType": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdInDefinition"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "CWLInputStdIn": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdInDefinition"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdInObjectType"
                      }
                    ]
                  },
                  "CWLOutputStdOutDefinition": {
                    "description": "Indicates that the data pushed to the standard output stream by the command will be redirected to this CWL output.\nCan be defined for only one output. If combined with 'stdout' at the root of the CWL document, that definition\nwill indicate the desired name of the output file where the output stream will be written to. A random name will\nbe applied for the file of this output unless otherwise specified.\n",
                    "type": "string",
                    "enum": [
                      "stdout"
                    ]
                  },
                  "CWLOutputStdOutObjectType": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOutDefinition"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "CWLOutputStdOut": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOutDefinition"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOutObjectType"
                      }
                    ]
                  },
                  "CWLOutputStdErrDefinition": {
                    "description": "Indicates that the data pushed to the standard error stream by the command will be redirected to this CWL output.\nCan be defined for only one output. If combined with 'stderr' at the root of the CWL document, that definition\nwill indicate the desired name of the output file where the error stream will be written to.  A random name will\nbe applied for the file of this output unless otherwise specified.\n",
                    "type": "string",
                    "enum": [
                      "stderr"
                    ]
                  },
                  "CWLOutputStdErrObjectType": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErrDefinition"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  "CWLOutputStdErr": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErrDefinition"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErrObjectType"
                      }
                    ]
                  },
                  "CWLInputsDefinition": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputList"
                      },
                      {
                        "$comment": "Avoid 'oneOf' conflict of generic mapping key strings as input identifier matching against '$import'.",
                        "allOf": [
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputMap"
                          },
                          {
                            "not": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                            }
                          }
                        ]
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                      }
                    ],
                    "title": "CWLInputsDefinition",
                    "description": "All inputs available to the Application Package."
                  },
                  "CWLInputList": {
                    "type": "array",
                    "title": "CWLInputList",
                    "description": "Package inputs defined as items.",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputItem"
                    }
                  },
                  "CWLFormat": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                        }
                      }
                    ]
                  },
                  "CWLType": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeList"
                      }
                    ],
                    "title": "CWL Type"
                  },
                  "CWLTypeDefinition": {
                    "type": "string",
                    "title": "CWL type string definition",
                    "summary": "CWL type string definition.",
                    "description": "Field type definition.",
                    "$comment": "Note that 'Any' is equivalent to any of the non-null types.\nTherefore, a nullable 'Any' explicitly specified by 'Any?' or its array-nullable form 'Any[]?' are not equivalent.\n",
                    "enum": [
                      "null",
                      "Any",
                      "Any?",
                      "Any[]",
                      "Any[]?",
                      "Directory",
                      "Directory?",
                      "Directory[]",
                      "Directory[]?",
                      "File",
                      "File?",
                      "File[]",
                      "File[]?",
                      "boolean",
                      "boolean?",
                      "boolean[]",
                      "boolean[]?",
                      "double",
                      "double?",
                      "double[]",
                      "double[]?",
                      "enum?",
                      "enum[]",
                      "enum[]?",
                      "float",
                      "float?",
                      "float[]",
                      "float[]?",
                      "int",
                      "int?",
                      "int[]",
                      "int[]?",
                      "integer",
                      "integer?",
                      "integer[]",
                      "integer[]?",
                      "long",
                      "long?",
                      "long[]",
                      "long[]?",
                      "string",
                      "string?",
                      "string[]",
                      "string[]?"
                    ]
                  },
                  "CWLTypeBase": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeDefinition"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeArray"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeEnum"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordRef"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordSchema"
                      }
                    ],
                    "title": "CWLTypeBase"
                  },
                  "CWLTypeArray": {
                    "type": "object",
                    "title": "CWLTypeArray",
                    "summary": "CWL type as list of items.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "title": "type",
                        "example": "array",
                        "enum": [
                          "array"
                        ]
                      },
                      "items": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                      }
                    },
                    "required": [
                      "type",
                      "items"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLTypeSymbols": {
                    "type": "array",
                    "title": "CWLTypeSymbols",
                    "summary": "Allowed values composing the enum.",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbolValues"
                    }
                  },
                  "CWLTypeSymbolValues": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "title": "CWLTypeSymbolValues"
                  },
                  "CWLTypeEnum": {
                    "type": "object",
                    "title": "CWLTypeEnum",
                    "summary": "CWL type as enum of values.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "title": "type",
                        "example": "enum",
                        "enum": [
                          "enum"
                        ]
                      },
                      "symbols": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbols"
                      }
                    },
                    "required": [
                      "type",
                      "symbols"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLTypeRecordRef": {
                    "description": "An IRI with minimally a '{Record}' identifier to look for a schema definition locally or remotely.\n\nThe identifier resolution is performed accordingly to the specified reference and as described in\nhttps://www.commonwl.org/v1.2/SchemaSalad.html#Identifier_resolution.\n",
                    "$comment": "Avoid 'oneOf' conflict of valid strings between this CWL record reference and the generic CWL types.",
                    "allOf": [
                      {
                        "not": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeDefinition"
                        }
                      },
                      {
                        "not": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdInDefinition"
                        }
                      },
                      {
                        "not": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOutDefinition"
                        }
                      },
                      {
                        "not": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErrDefinition"
                        }
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeRecordRefPattern"
                      }
                    ]
                  },
                  "CWLTypeRecordRefPattern": {
                    "type": "string",
                    "format": "url",
                    "pattern": "^(((?:http|ftp)s?:\\/\\/)?(?!.*\\/\\/.*$)(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?\\.)+(?:[A-Za-z]{2,6}\\.?|[A-Za-z0-9-]{2,}\\.?)|localhost|\\[[a-f0-9:]+\\]|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[\\/?]\\S+))?(?:[A-Za-z0-9\\w\\-.\\/]+)?\\#?[A-Za-z0-9\\w\\-.]+$"
                  },
                  "CWLTypeList": {
                    "type": "array",
                    "title": "CWLTypeList",
                    "summary": "Combination of allowed CWL types.",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeBase"
                    }
                  },
                  "CWLDefault": {
                    "title": "CWLDefault",
                    "description": "Default value of input if not provided for task execution.",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyLiteralType"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyLiteralList"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultLocation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultObject"
                      },
                      {
                        "type": "array",
                        "items": {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultObject"
                        }
                      }
                    ]
                  },
                  "CWLDefaultTypedConditional": {
                    "$comment": "Validate that the 'default' value, if specified, is of same type as the CWL 'type'.\nThis avoids over-accepting anything that does not match the intended type.\nHowever, validation limits itself to data literals and arrays.\nNested type and multi-type definitions will validate against 'Any'.\n",
                    "allOf": [
                      {
                        "$comment": "Object structure with minimally 'type' and 'default'. Otherwise, no point to continue testing.",
                        "type": "object",
                        "properties": {
                          "type": {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyType"
                          },
                          "default": {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyType"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "$comment": "Explicit null.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "null"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "null"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required string.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "string"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Optional string.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "string?"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required boolean.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "boolean"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Optional boolean.",
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "double?",
                                "float?",
                                "int?",
                                "integer?",
                                "long?"
                              ]
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": [
                                "number",
                                "null"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required numeric.",
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "double",
                                "float",
                                "int",
                                "integer",
                                "long"
                              ]
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "number"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Optional numeric.",
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "double?",
                                "float?",
                                "int?",
                                "integer?",
                                "long?"
                              ]
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": [
                                "number",
                                "null"
                              ]
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required enum.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "enum"
                            },
                            "symbols": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbols"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": {
                                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbolValues"
                              }
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Optional enum.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "enum?"
                            },
                            "symbols": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbols"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLTypeSymbolValues"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required File or Directory.",
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "Directory",
                                "File"
                              ]
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultLocation"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Optional File or Directory.",
                        "if": {
                          "properties": {
                            "type": {
                              "enum": [
                                "Directory?",
                                "File?"
                              ]
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "oneOf": [
                                {
                                  "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultLocation"
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required array of string.",
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "const": "string[]"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "array"
                                },
                                "items": {
                                  "const": "string"
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required array of boolean.",
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "const": "boolean[]"
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "array"
                                },
                                "items": {
                                  "const": "boolean"
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "array",
                              "items": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required array of numeric.",
                        "if": {
                          "oneOf": [
                            {
                              "properties": {
                                "type": {
                                  "enum": [
                                    "double[]",
                                    "float[]",
                                    "int[]",
                                    "integer[]",
                                    "long[]"
                                  ]
                                }
                              }
                            },
                            {
                              "properties": {
                                "type": {
                                  "const": "array"
                                },
                                "items": {
                                  "enum": [
                                    "double",
                                    "float",
                                    "int",
                                    "integer",
                                    "long"
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "type": "array",
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required anything (single).",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "Any"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "$comment": "Match anything.",
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyType"
                            }
                          }
                        }
                      },
                      {
                        "$comment": "Required array of anything.",
                        "if": {
                          "properties": {
                            "type": {
                              "const": "Any[]"
                            }
                          }
                        },
                        "then": {
                          "properties": {
                            "default": {
                              "$comment": "Match anything as long as under array.",
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyType"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "AnyType": {
                    "type": [
                      "boolean",
                      "number",
                      "string",
                      "array",
                      "object"
                    ]
                  },
                  "AnyLiteralType": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "AnyLiteralList": {
                    "type": "array",
                    "title": "AnyLiteralList",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/AnyLiteralType"
                    }
                  },
                  "Checksum": {
                    "$comment": "Minimal pattern check to know which hash algorithm to apply,\nbut don't check too harshly for the rest (length, allowed characters, etc.).\n",
                    "type": "string",
                    "pattern": "^[a-z0-9\\-]+\\$[\\w\\-.]+$"
                  },
                  "ReferenceURL": {
                    "type": "string",
                    "format": "url",
                    "pattern": "^((?:http|ftp)s?:\\/\\/)?(?!.*\\/\\/.*$)(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?\\.)+(?:[A-Za-z]{2,6}\\.?|[A-Za-z0-9-]{2,}\\.?)|localhost|\\[[a-f0-9:]+\\]|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(?::\\d+)?(?:\\/?|[/?]\\S+)$"
                  },
                  "CWLDefaultLocation": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "File",
                          "Directory"
                        ]
                      },
                      "path": {
                        "type": "string"
                      },
                      "location": {
                        "type": "string"
                      },
                      "basename": {
                        "type": "string"
                      },
                      "nameroot": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "class"
                    ],
                    "oneOf": [
                      {
                        "required": [
                          "path"
                        ]
                      },
                      {
                        "required": [
                          "location"
                        ]
                      }
                    ],
                    "additionalProperties": false
                  },
                  "CWLDefaultObject": {
                    "type": "object",
                    "not": {
                      "$comment": "Avoid false-positive match of default File or Directory location definition.",
                      "properties": {
                        "class": {
                          "type": "string",
                          "enum": [
                            "File",
                            "Directory"
                          ]
                        }
                      }
                    },
                    "additionalProperties": {}
                  },
                  "InputBinding": {
                    "type": "object",
                    "title": "Input Binding",
                    "description": "Defines how to specify the input for the command.",
                    "properties": {
                      "prefix": {
                        "type": "string"
                      },
                      "position": {
                        "oneOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                          }
                        ]
                      },
                      "valueFrom": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "itemSeparator": {
                        "type": "string"
                      },
                      "shellQuote": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "CWLInputItemBase": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                          },
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdIn"
                          }
                        ]
                      },
                      "inputBinding": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InputBinding"
                      },
                      "id": {
                        "description": "Identifier of the CWL input.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLInputItem": {
                    "title": "Input",
                    "description": "Input specification. Note that multiple formats are supported and\nnot all specification variants or parameters are presented here. Please refer\nto official CWL documentation for more details (https://www.commonwl.org).\n",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputItemBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultTypedConditional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      }
                    ]
                  },
                  "CWLInputObjectBase": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                      },
                      "inputBinding": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/InputBinding",
                        "additionalProperties": {}
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLInputObject": {
                    "title": "CWLInputObject",
                    "summary": "CWL type definition with parameters.",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputObjectBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefaultTypedConditional"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      }
                    ]
                  },
                  "CWLInputMap": {
                    "type": "object",
                    "title": "CWLInputMap",
                    "description": "Package inputs defined as mapping.",
                    "properties": {},
                    "required": [],
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputObject"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputStdIn"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                        }
                      ]
                    }
                  },
                  "CWLOutputsDefinition": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputList"
                      },
                      {
                        "$comment": "Avoid 'oneOf' conflict of generic mapping key strings as output identifier matching against '$import'.",
                        "allOf": [
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputMap"
                          },
                          {
                            "not": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                            }
                          }
                        ]
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                      }
                    ],
                    "title": "CWLOutputsDefinition",
                    "description": "All outputs produced by the Application Package."
                  },
                  "CWLOutputList": {
                    "type": "array",
                    "title": "CWLOutputList",
                    "description": "Package outputs defined as items.",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputItem"
                    }
                  },
                  "OutputBinding": {
                    "type": "object",
                    "title": "OutputBinding",
                    "description": "Defines how to retrieve the output result from the command.",
                    "properties": {
                      "glob": {
                        "description": "Glob pattern to find the output on disk or mounted docker volume.",
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                          },
                          {
                            "type": "array",
                            "items": {
                              "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": {}
                  },
                  "CWLOutputItem": {
                    "type": "object",
                    "title": "CWLOutputItem",
                    "description": "Output specification. Note that multiple formats are supported\nand not all specification variants or parameters are presented here. Please\nrefer to official CWL documentation for more details (https://www.commonwl.org).\n",
                    "properties": {
                      "type": {
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                          },
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOut"
                          },
                          {
                            "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErr"
                          }
                        ]
                      },
                      "outputBinding": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/OutputBinding"
                      },
                      "id": {
                        "description": "Identifier of the CWL output.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLOutputObjectBase": {
                    "type": "object",
                    "title": "CWLOutputObject",
                    "summary": "CWL type definition with parameters.",
                    "properties": {
                      "type": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                      },
                      "outputBinding": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/OutputBinding"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLOutputObject": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputObjectBase"
                      }
                    ]
                  },
                  "CWLOutputMap": {
                    "type": "object",
                    "title": "CWLOutputMap",
                    "description": "Package outputs defined as mapping.",
                    "properties": {},
                    "required": [],
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLType"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputObject"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdOut"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputStdErr"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLImport"
                        }
                      ]
                    }
                  },
                  "CWLScatter": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLScatterMulti"
                      }
                    ],
                    "title": "CWLScatter",
                    "description": "One or more input identifier of an application step within a Workflow\nwere an array-based input to that Workflow should be scattered across multiple\ninstances of the step application.\n"
                  },
                  "CWLScatterMulti": {
                    "type": "array",
                    "title": "CWLScatterMulti",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                    }
                  },
                  "CWLScatterMethod": {
                    "type": "string",
                    "title": "scatterMethod",
                    "description": "Describes how to decompose the scattered input into a discrete\nset of jobs. When 'dotproduct', specifies that each of the input arrays\nare aligned and one element taken from each array to construct each job.\nIt is an error if all input arrays are of different length. When 'nested_crossproduct',\nspecifies the Cartesian product of the inputs, producing a job for every\ncombination of the scattered inputs. The output must be nested arrays\nfor each level of scattering, in the order that the input arrays are listed\nin the scatter field. When 'flat_crossproduct', specifies the Cartesian\nproduct of the inputs, producing a job for every combination of the scattered\ninputs. The output arrays must be flattened to a single level, but otherwise\nlisted in the order that the input arrays are listed in the scatter field.\n",
                    "enum": [
                      "dotproduct",
                      "nested_crossproduct",
                      "flat_crossproduct"
                    ]
                  },
                  "CWLWorkflowStepScatter": {
                    "type": "object",
                    "properties": {
                      "scatter": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/Scatter"
                      },
                      "scatterMethod": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/ScatterMethod"
                      }
                    }
                  },
                  "CWLWorkflowStepRun": {
                    "description": "Nested CWL definition to run as Workflow step.",
                    "oneOf": [
                      {
                        "description": "File or URL reference to a CWL tool definition.",
                        "type": "string"
                      },
                      {
                        "description": "Nested CWL tool definition for the step.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLAtomicNested"
                      },
                      {
                        "description": "Nested CWL Workflow definition for the step.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowNested"
                      }
                    ]
                  },
                  "CWLWorkflowStepWhen": {
                    "description": "Condition to execute a step that must evaluate to a boolean-like value.",
                    "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                  },
                  "LinkMergeMethod": {
                    "type": "string",
                    "enum": [
                      "merge_nested",
                      "merge_flattened"
                    ]
                  },
                  "CWLWorkflowStepInputBase": {
                    "type": "object",
                    "properties": {
                      "source": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "linkMerge": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/LinkMergeMethod"
                      },
                      "valueFrom": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      }
                    }
                  },
                  "CWLWorkflowStepInputDefault": {
                    "$comment": "CWL 'type' is not specified at this level for step inputs\n(it is provided by the mapped input of the nested tool instead).\nTherefore, cannot validate against 'CWLDefaultTypedConditional'.\n",
                    "type": "object",
                    "properties": {
                      "default": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDefault"
                      }
                    }
                  },
                  "CWLWorkflowStepInput": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInputBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInputDefault"
                      }
                    ]
                  },
                  "CWLWorkflowStepInputId": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "CWLWorkflowStepInItem": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInputId"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInputBase"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInputDefault"
                      }
                    ]
                  },
                  "CWLWorkflowStepInList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInItem"
                    }
                  },
                  "CWLWorkflowStepInMap": {
                    "type": "object",
                    "additionalProperties": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInput"
                        }
                      ]
                    }
                  },
                  "CWLWorkflowStepIn": {
                    "description": "Mapping of Workflow step inputs to nested CWL tool definitions inputs or outputs.",
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepInList"
                      }
                    ]
                  },
                  "CWLWorkflowStepOutId": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      }
                    },
                    "required": [
                      "id"
                    ],
                    "additionalProperties": false
                  },
                  "CWLWorkflowStepOut": {
                    "description": "Mapping of Workflow step inputs to nested CWL tool definitions inputs or outputs.",
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                        },
                        {
                          "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepOutId"
                        }
                      ]
                    }
                  },
                  "CWLWorkflowStepDefinition": {
                    "type": "object",
                    "properties": {
                      "in": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepIn"
                      },
                      "run": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepRun"
                      },
                      "when": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepWhen"
                      },
                      "out": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepOut"
                      }
                    },
                    "required": [
                      "in",
                      "run",
                      "out"
                    ]
                  },
                  "CWLWorkflowStepObject": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepDefinition"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepScatter"
                      }
                    ]
                  },
                  "CWLWorkflowStepItem": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepId"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepObject"
                      }
                    ]
                  },
                  "CWLWorkflowStepId": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "CWLWorkflowStepMap": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepObject"
                    }
                  },
                  "CWLWorkflowStepList": {
                    "type": "array",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepItem"
                    }
                  },
                  "CWLWorkflowClass": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string",
                        "enum": [
                          "Workflow"
                        ]
                      }
                    }
                  },
                  "CWLWorkflowSteps": {
                    "oneOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepMap"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowStepList"
                      }
                    ]
                  },
                  "CWLWorkflowBase": {
                    "type": "object",
                    "properties": {
                      "steps": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowSteps"
                      },
                      "inputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputsDefinition"
                      },
                      "outputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputsDefinition"
                      },
                      "requirements": {
                        "$comment": "Technically a different subset, but lots of redefinitions to be done.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirements"
                      },
                      "hints": {
                        "$comment": "Technically a different subset, but lots of redefinitions to be done.",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHints"
                      }
                    }
                  },
                  "CWLWorkflowNested": {
                    "$comment": "Same as 'CWLWorkflow', but 'cwlVersion' not repeated (only at root).",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowClass"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowBase"
                      }
                    ]
                  },
                  "CWLWorkflow": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLVersion"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowClass"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLWorkflowBase"
                      }
                    ]
                  },
                  "CWLVersion": {
                    "type": "object",
                    "properties": {
                      "clwVersion": {
                        "type": "string",
                        "title": "cwlVersion",
                        "description": "CWL version of the described application package.",
                        "pattern": "^v\\d+(\\.\\d+(\\.\\d+)*)*$"
                      }
                    },
                    "required": [
                      "cwlVersion"
                    ]
                  },
                  "CWLAtomic": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLVersion"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLAtomicBase"
                      }
                    ]
                  },
                  "CWLAtomicNested": {
                    "$comment": "Same as 'CWLAtomic', but 'cwlVersion' not repeated (only at root).",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLAtomicBase"
                      }
                    ]
                  },
                  "CWLAtomicBase": {
                    "type": "object",
                    "title": "CWL atomic definition",
                    "description": "Direct CWL definition instead of the graph representation.",
                    "properties": {
                      "id": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      },
                      "class": {
                        "type": "string",
                        "title": "Class",
                        "description": "CWL class specification. This is used to differentiate between single Application Package (AP)definitions and Workflow that chains multiple packages.",
                        "enum": [
                          "CommandLineTool",
                          "ExpressionTool"
                        ]
                      },
                      "intent": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIntent"
                      },
                      "requirements": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirements"
                      },
                      "hints": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHints"
                      },
                      "baseCommand": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLCommand"
                      },
                      "arguments": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLArguments"
                      },
                      "inputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputsDefinition"
                      },
                      "outputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputsDefinition"
                      },
                      "stdin": {
                        "description": "Source of the input stream. \nTypically, an expression referring to an existing file name or an input of the CWL document.\n",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "stdout": {
                        "description": "Destination of the output stream.\nTypically, an expression referring to a desired file name or provided by a CWL input reference.\n",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "stderr": {
                        "description": "Destination of the error stream.\nTypically, an expression referring to a desired file name or provided by a CWL input reference.\n",
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLExpression"
                      },
                      "scatter": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLScatter"
                      },
                      "scatterMethod": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLScatterMethod"
                      }
                    },
                    "required": [
                      "class",
                      "inputs",
                      "outputs"
                    ]
                  },
                  "CWLGraphList": {
                    "type": "array",
                    "title": "CWLGraphList",
                    "description": "Graph definition that defines *exactly one* CWL application package represented as list. Multiple definitions simultaneously deployed is NOT supported currently.",
                    "items": {
                      "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLGraphItem"
                    },
                    "maxItems": 1,
                    "minItems": 1
                  },
                  "CWLGraphItem": {
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLGraphItemBase"
                      }
                    ]
                  },
                  "CWLGraphItemBase": {
                    "type": "object",
                    "title": "CWLGraphItem",
                    "properties": {
                      "class": {
                        "type": "string",
                        "title": "Class",
                        "description": "CWL class specification. This is used to differentiate between single Application Package (AP)definitions and Workflow that chains multiple packages.",
                        "enum": [
                          "CommandLineTool",
                          "ExpressionTool",
                          "Workflow"
                        ]
                      },
                      "id": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIdentifier"
                      },
                      "intent": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLIntent"
                      },
                      "requirements": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLRequirements"
                      },
                      "hints": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLHints"
                      },
                      "baseCommand": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLCommand"
                      },
                      "arguments": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLArguments"
                      },
                      "inputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLInputsDefinition"
                      },
                      "outputs": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLOutputsDefinition"
                      },
                      "scatter": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLScatter"
                      },
                      "scatterMethod": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLScatterMethod"
                      }
                    },
                    "required": [
                      "class",
                      "id",
                      "inputs",
                      "outputs"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLGraphBase": {
                    "type": "object",
                    "properties": {
                      "$graph": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLGraphList"
                      }
                    },
                    "required": [
                      "$graph"
                    ],
                    "additionalProperties": {}
                  },
                  "CWLGraph": {
                    "title": "CWLGraph",
                    "allOf": [
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLVersion"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLMetadata"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLDocumentation"
                      },
                      {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLGraphBase"
                      }
                    ]
                  },
                  "CWLDocumentation": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "doc": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "CWLMetadata": {
                    "type": "object",
                    "properties": {
                      "s:keywords": {
                        "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema/%24defs/CWLKeywordList"
                      },
                      "version": {
                        "type": "string",
                        "title": "version",
                        "description": "Version of the process.",
                        "example": "1.2.3",
                        "pattern": "^\\d+(\\.\\d+(\\.\\d+(\\.[A-Za-z0-9\\-_]+)*)*)*$"
                      }
                    }
                  }
                }
              }
            },
            "application/cwl+json": {
              "schema": {
                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema"
              }
            },
            "application/cwl+yaml": {
              "schema": {
                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/schemas/processSummary"
          },
          "403": {
            "$ref": "#/components/responses/ImmutableProcess"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateProcess"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/processes/{processID}": {
      "get": {
        "summary": "retrieve a process description",
        "description": "The process description contains information about inputs and outputs and a link to the execution-endpoint for the process. The Core does not mandate the use of a specific process description to specify the interface of a process. That said, the Core requirements class makes the following recommendation:\n\nImplementations SHOULD consider supporting the OGC process description.\n\nFor more information, see [Section 7.8](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_process_description).\n",
        "operationId": "getProcessDescription",
        "tags": [
          "Processes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/processID-path"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProcessDescription"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "replace a process.",
        "description": "Replaces a process.\n\nFor more information, see [Section 6.4](http://docs.ogc.org/DRAFTS/20-044.html#_18582f42-ebc6-4284-9333-c089068f62b6).\n",
        "operationId": "replace",
        "tags": [
          "DRU"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/processID-path"
          }
        ],
        "requestBody": {
          "description": "An OGC Application Package used to deploy a new process.",
          "required": true,
          "content": {
            "application/ogcapppkg+json": {
              "schema": {
                "$ref": "#/components/schemas/ogcapppkg"
              }
            },
            "application/cwl": {
              "schema": {
                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema"
              }
            },
            "application/cwl+json": {
              "schema": {
                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema"
              }
            },
            "application/cwl+yaml": {
              "schema": {
                "$ref": "#/paths/~1processes/post/requestBody/content/application~1cwl/schema"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "403": {
            "$ref": "#/components/responses/ImmutableProcess"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateProcess"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "undeploy a process.",
        "description": "Undeploys a process.\n\nFor more information, see [Section 6.5](http://docs.ogc.org/DRAFTS/20-044.html#_16391f9e-538f-4a84-9710-72a6bab82842).\n",
        "operationId": "undeploy",
        "tags": [
          "DRU"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/processID-path"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "403": {
            "$ref": "#/components/responses/ImmutableProcess"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/processes/{processID}/package": {
      "get": {
        "summary": "retrieve the formal description used to deploy a process",
        "description": "Access the formal description that can be used to deploy a process on an OGC API - Processes Server Instance.\n",
        "operationId": "getPackage",
        "tags": [
          "DRU"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/processID-path"
          }
        ],
        "responses": {
          "200": {
            "description": "The formal used to deploy a process",
            "content": {
              "application/ogcapppkg+json": {
                "schema": {
                  "$ref": "#/components/schemas/ogcapppkg"
                }
              },
              "application/cwl": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "definitions": {
                    "CommandInputArraySchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputArraySchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "inputBinding": {
                          "$ref": "#/definitions/CommandLineBinding",
                          "description": "Describes how to turn this object into command line arguments."
                        },
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandInputArraySchema"
                            },
                            {
                              "$ref": "#/definitions/CommandInputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/CommandInputEnumSchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandInputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputEnumSchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Defines the type of the array elements."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "array",
                          "description": "Must be `array`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandInputEnumSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputEnumSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "inputBinding": {
                          "$ref": "#/definitions/CommandLineBinding",
                          "description": "Describes how to turn this object into command line arguments."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "symbols": {
                          "description": "Defines the set of valid symbols.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "const": "enum",
                          "description": "Must be `enum`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "symbols",
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandInputParameter": {
                      "additionalProperties": false,
                      "description": "An input parameter for a CommandLineTool.",
                      "properties": {
                        "default": {
                          "description": "The default value to use for this parameter if the parameter is missing\nfrom the input object, or if the value of the parameter in the input\nobject is `null`.  Default values are applied before evaluating expressions\n(e.g. dependent `valueFrom` fields)."
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "inputBinding": {
                          "$ref": "#/definitions/CommandLineBinding",
                          "description": "Describes how to turn the input parameters of a process into\ncommand line arguments."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "loadContents": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                          "type": "boolean"
                        },
                        "loadListing": {
                          "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandInputArraySchema"
                            },
                            {
                              "$ref": "#/definitions/CommandInputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/CommandInputEnumSchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandInputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputEnumSchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandInputRecordField": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                            },
                            "inputBinding": {
                              "$ref": "#/definitions/CommandLineBinding",
                              "description": "Describes how to turn this object into command line arguments."
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "loadContents": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                              "type": "boolean"
                            },
                            "loadListing": {
                              "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                              "enum": [
                                "deep_listing",
                                "no_listing",
                                "shallow_listing"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/CommandInputArraySchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandInputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandInputEnumSchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/CommandInputArraySchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandInputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandInputEnumSchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/CommandInputArraySchema"
                              },
                              {
                                "$ref": "#/definitions/CommandInputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/CommandInputEnumSchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/CommandInputArraySchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandInputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandInputEnumSchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        }
                      ]
                    },
                    "CommandInputRecordSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "fields": {
                          "description": "Defines the fields of the record.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/CommandInputRecordField"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "$ref": "#/definitions/CommandInputRecordFieldMap"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "inputBinding": {
                          "$ref": "#/definitions/CommandLineBinding",
                          "description": "Describes how to turn this object into command line arguments."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "record",
                          "description": "Must be `record`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandLineBinding": {
                      "additionalProperties": false,
                      "description": "When listed under `inputBinding` in the input schema, the term\n\"value\" refers to the corresponding value in the input object.  For\nbinding objects listed in `CommandLineTool.arguments`, the term \"value\"\nrefers to the effective value after evaluating `valueFrom`.\n\nThe binding behavior when building the command line depends on the data\ntype of the value.  If there is a mismatch between the type described by\nthe input schema and the effective value, such as resulting from an\nexpression evaluation, an implementation must use the data type of the\neffective value.\n\n  - **string**: Add `prefix` and the string to the command line.\n\n  - **number**: Add `prefix` and decimal representation to command line.\n\n  - **boolean**: If true, add `prefix` to the command line.  If false, add\n      nothing.\n\n  - **File**: Add `prefix` and the value of\n    [`File.path`](#File) to the command line.\n\n  - **Directory**: Add `prefix` and the value of\n    [`Directory.path`](#Directory) to the command line.\n\n  - **array**: If `itemSeparator` is specified, add `prefix` and the join\n      the array into a single string with `itemSeparator` separating the\n      items.  Otherwise, first add `prefix`, then recursively process\n      individual elements.\n      If the array is empty, it does not add anything to command line.\n\n  - **object**: Add `prefix` only, and recursively add object fields for\n      which `inputBinding` is specified.\n\n  - **null**: Add nothing.",
                      "properties": {
                        "itemSeparator": {
                          "description": "Join the array elements into a single string with the elements\nseparated by `itemSeparator`.",
                          "type": "string"
                        },
                        "loadContents": {
                          "description": "Use of `loadContents` in `InputBinding` is deprecated.\nPreserved for v1.0 backwards compatibility.  Will be removed in\nCWL v2.0.  Use `InputParameter.loadContents` instead.",
                          "type": "boolean"
                        },
                        "position": {
                          "description": "The sorting key.  Default position is 0. If a [CWL Parameter Reference](#Parameter_references)\nor [CWL Expression](#Expressions_(Optional)) is used and if the\ninputBinding is associated with an input parameter, then the value of\n`self` will be the value of the input parameter.  Input parameter\ndefaults (as specified by the `InputParameter.default` field) must be\napplied before evaluating the expression. Expressions must return a\nsingle value of type int or a null.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "prefix": {
                          "description": "Command line prefix to add before the value.",
                          "type": "string"
                        },
                        "separate": {
                          "description": "If true (default), then the prefix and value must be added as separate\ncommand line arguments; if false, prefix and value must be concatenated\ninto a single command line argument.",
                          "type": "boolean"
                        },
                        "shellQuote": {
                          "description": "If `ShellCommandRequirement` is in the requirements for the current command,\nthis controls whether the value is quoted on the command line (default is true).\nUse `shellQuote: false` to inject metacharacters for operations such as pipes.\n\nIf `shellQuote` is true or not provided, the implementation must not\npermit interpretation of any shell metacharacters or directives.",
                          "type": "boolean"
                        },
                        "valueFrom": {
                          "description": "If `valueFrom` is a constant string value, use this as the value and\napply the binding rules above.\n\nIf `valueFrom` is an expression, evaluate the expression to yield the\nactual value to use to build the command line and apply the binding\nrules above.  If the inputBinding is associated with an input\nparameter, the value of `self` in the expression will be the value of\nthe input parameter.  Input parameter defaults (as specified by the\n`InputParameter.default` field) must be applied before evaluating the\nexpression.\n\nIf the value of the associated input parameter is `null`, `valueFrom` is\nnot evaluated and nothing is added to the command line.\n\nWhen a binding is part of the `CommandLineTool.arguments` field,\nthe `valueFrom` field is required.",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "CommandLineTool": {
                      "description": "This defines the schema of the CWL Command Line Tool Description document.",
                      "properties": {
                        "arguments": {
                          "description": "Command line bindings which are not directly associated with input\nparameters. If the value is a string, it is used as a string literal\nargument. If it is an Expression, the result of the evaluation is used\nas an argument.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/CommandLineBinding"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "baseCommand": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specifies the program to execute.  If an array, the first element of\nthe array is the command to execute, and subsequent elements are\nmandatory command line arguments.  The elements in `baseCommand` must\nappear before any command line bindings from `inputBinding` or\n`arguments`.\n\nIf `baseCommand` is not provided or is an empty array, the first\nelement of the command line produced after processing `inputBinding` or\n`arguments` must be used as the program to execute.\n\nIf the program includes a path separator character it must\nbe an absolute path, otherwise it is an error.  If the program does not\ninclude a path separator, search the `$PATH` variable in the runtime\nenvironment of the workflow runner find the absolute path of the\nexecutable."
                        },
                        "class": {
                          "const": "CommandLineTool",
                          "type": "string"
                        },
                        "cwlVersion": {
                          "description": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.",
                          "enum": [
                            "draft-2",
                            "draft-3",
                            "draft-3.dev1",
                            "draft-3.dev2",
                            "draft-3.dev3",
                            "draft-3.dev4",
                            "draft-3.dev5",
                            "draft-4.dev1",
                            "draft-4.dev2",
                            "draft-4.dev3",
                            "v1.0",
                            "v1.0.dev4",
                            "v1.1",
                            "v1.1.0-dev1",
                            "v1.2",
                            "v1.2.0-dev1",
                            "v1.2.0-dev2",
                            "v1.2.0-dev3",
                            "v1.2.0-dev4",
                            "v1.2.0-dev5"
                          ],
                          "type": "string"
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "hints": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "id": {
                          "description": "The unique identifier for this object.\n\nOnly useful for `$graph` at `Process` level. Should not be exposed\nto users in graphical or terminal user interfaces.",
                          "type": "string"
                        },
                        "inputs": {
                          "description": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/CommandInputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/CommandInputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/CommandInputArraySchema"
                                        },
                                        {
                                          "$ref": "#/definitions/CommandInputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/CommandInputEnumSchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/CommandInputArraySchema"
                                              },
                                              {
                                                "$ref": "#/definitions/CommandInputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/CommandInputEnumSchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/CommandInputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "intent": {
                          "description": "An identifier for the type of computational operation, of this Process.\nEspecially useful for [`Operation`](Workflow.html#Operation), but can also be used for\n[`CommandLineTool`](CommandLineTool.html#CommandLineTool),\n[`Workflow`](Workflow.html#Workflow), or [ExpressionTool](Workflow.html#ExpressionTool).\n\nIf provided, then this must be an IRI of a concept node that\nrepresents the type of operation, preferably defined within an ontology.\n\nFor example, in the domain of bioinformatics, one can use an IRI from\nthe EDAM Ontology's [Operation concept nodes](http://edamontology.org/operation_0004),\nlike [Alignment](http://edamontology.org/operation_2928),\nor [Clustering](http://edamontology.org/operation_3432); or a more\nspecific Operation concept like\n[Split read mapping](http://edamontology.org/operation_3199).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "outputs": {
                          "description": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/CommandOutputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/CommandOutputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/CommandOutputArraySchema"
                                        },
                                        {
                                          "$ref": "#/definitions/CommandOutputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/CommandOutputEnumSchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/CommandOutputArraySchema"
                                              },
                                              {
                                                "$ref": "#/definitions/CommandOutputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/CommandOutputEnumSchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/CommandOutputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "permanentFailCodes": {
                          "description": "Exit codes that indicate the process failed due to a permanent logic error, where executing the process with the same runtime environment and same inputs is expected to always fail.\nIf not specified, all exit codes except 0 are considered permanent failure.",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "requirements": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "stderr": {
                          "description": "Capture the command's standard error stream to a file written to\nthe designated output directory.\n\nIf `stderr` is a string, it specifies the file name to use.\n\nIf `stderr` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stderr.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.",
                          "type": "string"
                        },
                        "stdin": {
                          "description": "A path to a file whose contents must be piped into the command's\nstandard input stream.",
                          "type": "string"
                        },
                        "stdout": {
                          "description": "Capture the command's standard output stream to a file written to\nthe designated output directory.\n\nIf the `CommandLineTool` contains logically chained commands\n(e.g. `echo a && echo b`) `stdout` must include the output of\nevery command.\n\nIf `stdout` is a string, it specifies the file name to use.\n\nIf `stdout` is an expression, the expression is evaluated and must\nreturn a string with the file name to use to capture stdout.  If the\nreturn value is not a string, or the resulting path contains illegal\ncharacters (such as the path separator `/`) it is an error.",
                          "type": "string"
                        },
                        "successCodes": {
                          "description": "Exit codes that indicate the process completed successfully.\n\nIf not specified, only exit code 0 is considered success.",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        },
                        "temporaryFailCodes": {
                          "description": "Exit codes that indicate the process failed due to a possibly\ntemporary condition, where executing the process with the same\nruntime environment and inputs may produce different results.\n\nIf not specified, no exit codes are considered temporary failure.",
                          "items": {
                            "type": "number"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "class",
                        "inputs",
                        "outputs"
                      ],
                      "type": "object"
                    },
                    "CommandOutputArraySchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputArraySchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandOutputArraySchema"
                            },
                            {
                              "$ref": "#/definitions/CommandOutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/CommandOutputEnumSchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandOutputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandOutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandOutputEnumSchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Defines the type of the array elements."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "array",
                          "description": "Must be `array`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandOutputBinding": {
                      "additionalProperties": false,
                      "description": "Describes how to generate an output parameter based on the files produced\nby a CommandLineTool.\n\nThe output parameter value is generated by applying these operations in the\nfollowing order:\n\n  - glob\n  - loadContents\n  - outputEval\n  - secondaryFiles",
                      "properties": {
                        "glob": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Find files or directories relative to the output directory, using POSIX\nglob(3) pathname matching.  If an array is provided, find files or\ndirectories that match any pattern in the array.  If an expression is\nprovided, the expression must return a string or an array of strings,\nwhich will then be evaluated as one or more glob patterns.  Must only\nmatch and return files/directories which actually exist.\n\nIf the value of glob is a relative path pattern (does not\nbegin with a slash '/') then it is resolved relative to the\noutput directory.  If the value of the glob is an absolute\npath pattern (it does begin with a slash '/') then it must\nrefer to a path within the output directory.  It is an error\nif any glob resolves to a path outside the output directory.\nSpecifically this means globs that resolve to paths outside the output\ndirectory are illegal.\n\nA glob may match a path within the output directory which is\nactually a symlink to another file.  In this case, the\nexpected behavior is for the resulting File/Directory object to take the\n`basename` (and corresponding `nameroot` and `nameext`) of the\nsymlink.  The `location` of the File/Directory is implementation\ndependent, but logically the File/Directory should have the same content\nas the symlink target.  Platforms may stage output files/directories to\ncloud storage that lack the concept of a symlink.  In\nthis case file content and directories may be duplicated, or (to avoid\nduplication) the File/Directory `location` may refer to the symlink\ntarget.\n\nIt is an error if a symlink in the output directory (or any\nsymlink in a chain of links) refers to any file or directory\nthat is not under an input or output directory.\n\nImplementations may shut down a container before globbing\noutput, so globs and expressions must not assume access to the\ncontainer filesystem except for declared input and output."
                        },
                        "loadContents": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                          "type": "boolean"
                        },
                        "loadListing": {
                          "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        },
                        "outputEval": {
                          "description": "Evaluate an expression to generate the output value.  If\n`glob` was specified, the value of `self` must be an array\ncontaining file objects that were matched.  If no files were\nmatched, `self` must be a zero length array; if a single file\nwas matched, the value of `self` is an array of a single\nelement.  The exit code of the process is\navailable in the expression as `runtime.exitCode`.\n\nAdditionally, if `loadContents` is true, the file must be a\nUTF-8 text file 64 KiB or smaller, and the implementation must\nread the entire contents of the file (or file array) and place\nit in the `contents` field of the File object for use in\n`outputEval`.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.\n\nIf a tool needs to return a large amount of structured data to\nthe workflow, loading the output object from `cwl.output.json`\nbypasses `outputEval` and is not subject to the 64 KiB\n`loadContents` limit.",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "CommandOutputEnumSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputEnumSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "symbols": {
                          "description": "Defines the set of valid symbols.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "const": "enum",
                          "description": "Must be `enum`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "symbols",
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandOutputParameter": {
                      "additionalProperties": false,
                      "description": "An output parameter for a CommandLineTool.",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "outputBinding": {
                          "$ref": "#/definitions/CommandOutputBinding",
                          "description": "Describes how to generate this output object based on the files produced by a CommandLineTool"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandOutputArraySchema"
                            },
                            {
                              "$ref": "#/definitions/CommandOutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/CommandOutputEnumSchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandOutputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandOutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandOutputEnumSchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "CommandOutputRecordField": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                              "type": "string"
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "outputBinding": {
                              "$ref": "#/definitions/CommandOutputBinding",
                              "description": "Describes how to generate this output object based on the files\nproduced by a CommandLineTool"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/CommandOutputArraySchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandOutputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandOutputEnumSchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/CommandOutputArraySchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandOutputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandOutputEnumSchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/CommandOutputArraySchema"
                              },
                              {
                                "$ref": "#/definitions/CommandOutputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/CommandOutputEnumSchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/CommandOutputArraySchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandOutputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandOutputEnumSchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        }
                      ]
                    },
                    "CommandOutputRecordSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "fields": {
                          "description": "Defines the fields of the record.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/CommandOutputRecordField"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "$ref": "#/definitions/CommandOutputRecordFieldMap"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "record",
                          "description": "Must be `record`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "DefaultFetcher": {
                      "additionalProperties": false,
                      "type": "object"
                    },
                    "Dictionary<any>": {
                      "additionalProperties": {
                        "$ref": "#/definitions/T"
                      },
                      "type": "object"
                    },
                    "Dictionary<string>": {
                      "additionalProperties": {
                        "$ref": "#/definitions/T"
                      },
                      "type": "object"
                    },
                    "Directory": {
                      "additionalProperties": false,
                      "description": "Represents a directory to present to a command line tool.\n\nDirectories are represented as objects with `class` of `Directory`.  Directory objects have\na number of properties that provide metadata about the directory.\n\nThe `location` property of a Directory is a IRI that uniquely identifies\nthe directory.  Implementations must support the file:// IRI scheme and may\nsupport other schemes such as http://.  Alternately to `location`,\nimplementations must also accept the `path` property on Directory, which\nmust be a filesystem path available on the same host as the CWL runner (for\ninputs) or the runtime environment of a command line tool execution (for\ncommand line tool outputs).\n\nA Directory object may have a `listing` field.  This is a list of File and\nDirectory objects that are contained in the Directory.  For each entry in\n`listing`, the `basename` property defines the name of the File or\nSubdirectory when staged to disk.  If `listing` is not provided, the\nimplementation must have some way of fetching the Directory listing at\nruntime based on the `location` field.\n\nIf a Directory does not have `location`, it is a Directory literal.  A\nDirectory literal must provide `listing`.  Directory literals must be\ncreated on disk at runtime as needed.\n\nThe resources in a Directory literal do not need to have any implied\nrelationship in their `location`.  For example, a Directory listing may\ncontain two files located on different hosts.  It is the responsibility of\nthe runtime to ensure that those files are staged to disk appropriately.\nSecondary files associated with files in `listing` must also be staged to\nthe same Directory.\n\nWhen executing a CommandLineTool, Directories must be recursively staged\nfirst and have local values of `path` assigned.\n\nDirectory objects in CommandLineTool output must provide either a\n`location` IRI or a `path` property in the context of the tool execution\nruntime (local to the compute node, or within the executing container).\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.\n\nName conflicts (the same `basename` appearing multiple times in `listing`\nor in any entry in `secondaryFiles` in the listing) is a fatal error.",
                      "properties": {
                        "basename": {
                          "description": "The base name of the directory, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.",
                          "type": "string"
                        },
                        "class": {
                          "const": "Directory",
                          "description": "Must be `Directory` to indicate this object describes a Directory.",
                          "type": "string"
                        },
                        "listing": {
                          "description": "List of files or subdirectories contained in this directory.  The name\nof each file or subdirectory is determined by the `basename` field of\neach `File` or `Directory` object.  It is an error if a `File` shares a\n`basename` with any other entry in `listing`.  If two or more\n`Directory` object share the same `basename`, this must be treated as\nequivalent to a single subdirectory with the listings recursively\nmerged.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/Directory"
                              },
                              {
                                "$ref": "#/definitions/File"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "location": {
                          "description": "An IRI that identifies the directory resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource.  If\nthe `listing` field is not set, the implementation must use the\nlocation IRI to retrieve directory listing.  If an implementation is\nunable to retrieve the directory listing stored at a remote resource (due to\nunsupported protocol, access denied, or other issue) it must signal an\nerror.\n\nIf the `location` field is not provided, the `listing` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.",
                          "type": "string"
                        },
                        "path": {
                          "description": "The local path where the Directory is made available prior to executing a\nCommandLineTool.  This must be set by the implementation.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to access the directory at `path` using the POSIX\n`opendir(2)` syscall.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "Dirent": {
                      "additionalProperties": false,
                      "description": "Define a file or subdirectory that must be staged to a particular\nplace prior to executing the command line tool.  May be the result\nof executing an expression, such as building a configuration file\nfrom a template.\n\nUsually files are staged within the [designated output directory](#Runtime_environment).\nHowever, under certain circumstances, files may be staged at\narbitrary locations, see discussion for `entryname`.",
                      "properties": {
                        "entry": {
                          "description": "If the value is a string literal or an expression which evaluates to a\nstring, a new text file must be created with the string as the file contents.\n\nIf the value is an expression that evaluates to a `File` or\n`Directory` object, or an array of `File` or `Directory`\nobjects, this indicates the referenced file or directory\nshould be added to the designated output directory prior to\nexecuting the tool.\n\nIf the value is an expression that evaluates to `null`,\nnothing is added to the designated output directory, the entry\nhas no effect.\n\nIf the value is an expression that evaluates to some other\narray, number, or object not consisting of `File` or\n`Directory` objects, a new file must be created with the value\nserialized to JSON text as the file contents.  The JSON\nserialization behavior should match the behavior of string\ninterpolation of [Parameter\nreferences](#Parameter_references).",
                          "type": "string"
                        },
                        "entryname": {
                          "description": "The \"target\" name of the file or subdirectory.  If `entry` is\na File or Directory, the `entryname` field overrides the value\nof `basename` of the File or Directory object.\n\n* Required when `entry` evaluates to file contents only\n* Optional when `entry` evaluates to a File or Directory object with a `basename`\n* Invalid when `entry` evaluates to an array of File or Directory objects.\n\nIf `entryname` is a relative path, it specifies a name within\nthe designated output directory.  A relative path starting\nwith `../` or that resolves to location above the designated output directory is an error.\n\nIf `entryname` is an absolute path (starts with a slash `/`)\nit is an error unless the following conditions are met:\n\n  * `DockerRequirement` is present in `requirements`\n  * The program is will run inside a software container\n  where, from the perspective of the program, the root\n  filesystem is not shared with any other user or\n  running program.\n\nIn this case, and the above conditions are met, then\n`entryname` may specify the absolute path within the container\nwhere the file or directory must be placed.",
                          "type": "string"
                        },
                        "writable": {
                          "description": "If true, the File or Directory (or array of Files or\nDirectories) declared in `entry` must be writable by the tool.\n\nChanges to the file or directory must be isolated and not\nvisible by any other CommandLineTool process.  This may be\nimplemented by making a copy of the original file or\ndirectory.\n\nDisruptive changes to the referenced file or directory must not\nbe allowed unless `InplaceUpdateRequirement.inplaceUpdate` is true.\n\nDefault false (files and directories read-only by default).\n\nA directory marked as `writable: true` implies that all files and\nsubdirectories are recursively writable as well.\n\nIf `writable` is false, the file may be made available using a\nbind mount or file system link to avoid unnecessary copying of\nthe input file.  Command line tools may receive an error on\nattempting to rename or delete files or directories that are\nnot explicitly marked as writable.",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "entry"
                      ],
                      "type": "object"
                    },
                    "DockerRequirement": {
                      "additionalProperties": false,
                      "description": "Indicates that a workflow component should be run in a\n[Docker](https://docker.com) or Docker-compatible (such as\n[Singularity](https://www.sylabs.io/) and [udocker](https://github.com/indigo-dc/udocker)) container environment and\nspecifies how to fetch or build the image.\n\nIf a CommandLineTool lists `DockerRequirement` under\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\ncontainer.\n\nThe platform must first acquire or install the correct Docker image as\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\n\nThe platform must execute the tool in the container using `docker run` with\nthe appropriate Docker image and tool command line.\n\nThe workflow platform may provide input files and the designated output\ndirectory through the use of volume bind mounts.  The platform should rewrite\nfile paths in the input object to correspond to the Docker bind mounted\nlocations. That is, the platform should rewrite values in the parameter context\nsuch as `runtime.outdir`, `runtime.tmpdir` and others to be valid paths\nwithin the container. The platform must ensure that `runtime.outdir` and\n`runtime.tmpdir` are distinct directories.\n\nWhen running a tool contained in Docker, the workflow platform must not\nassume anything about the contents of the Docker container, such as the\npresence or absence of specific software, except to assume that the\ngenerated command line represents a valid command within the runtime\nenvironment of the container.\n\nA container image may specify an\n[ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint)\nand/or\n[CMD](https://docs.docker.com/engine/reference/builder/#cmd).\nCommand line arguments will be appended after all elements of\nENTRYPOINT, and will override all elements specified using CMD (in\nother words, CMD is only used when the CommandLineTool definition\nproduces an empty command line).\n\nUse of implicit ENTRYPOINT or CMD are discouraged due to reproducibility\nconcerns of the implicit hidden execution point (For further discussion, see\n[https://doi.org/10.12688/f1000research.15140.1](https://doi.org/10.12688/f1000research.15140.1)). Portable\nCommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD.\nCommandLineTools which do rely on ENTRYPOINT or CMD must list `DockerRequirement` in the\n`requirements` section.\n\n## Interaction with other requirements\n\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\nDockerRequirement, the environment variables must be provided to Docker\nusing `--env` or `--env-file` and interact with the container's preexisting\nenvironment as defined by Docker.",
                      "properties": {
                        "class": {
                          "const": "DockerRequirement",
                          "description": "Always 'DockerRequirement'",
                          "type": "string"
                        },
                        "dockerFile": {
                          "description": "Supply the contents of a Dockerfile which will be built using `docker build`.",
                          "type": "string"
                        },
                        "dockerImageId": {
                          "description": "The image id that will be used for `docker run`.  May be a\nhuman-readable image name or the image identifier hash.  May be skipped\nif `dockerPull` is specified, in which case the `dockerPull` image id\nmust be used.",
                          "type": "string"
                        },
                        "dockerImport": {
                          "description": "Provide HTTP URL to download and gunzip a Docker images using `docker import.",
                          "type": "string"
                        },
                        "dockerLoad": {
                          "description": "Specify an HTTP URL from which to download a Docker image using `docker load`.",
                          "type": "string"
                        },
                        "dockerOutputDirectory": {
                          "description": "Set the designated output directory to a specific location inside the\nDocker container.",
                          "type": "string"
                        },
                        "dockerPull": {
                          "description": "Specify a Docker image to retrieve using `docker pull`. Can contain the\nimmutable digest to ensure an exact container is used:\n`dockerPull: ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "EnvVarRequirement": {
                      "additionalProperties": false,
                      "description": "Define a list of environment variables which will be set in the\nexecution environment of the tool.  See `EnvironmentDef` for details.",
                      "properties": {
                        "class": {
                          "const": "EnvVarRequirement",
                          "description": "Always 'EnvVarRequirement'",
                          "type": "string"
                        },
                        "envDef": {
                          "description": "The list of environment variables.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/EnvironmentDef"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "envDef"
                      ],
                      "type": "object"
                    },
                    "EnvironmentDef": {
                      "additionalProperties": false,
                      "description": "Define an environment variable that will be set in the runtime environment\nby the workflow platform when executing the command line tool.  May be the\nresult of executing an expression, such as getting a parameter from input.",
                      "properties": {
                        "envName": {
                          "description": "The environment variable name",
                          "type": "string"
                        },
                        "envValue": {
                          "description": "The environment variable value",
                          "type": "string"
                        }
                      },
                      "required": [
                        "envName",
                        "envValue"
                      ],
                      "type": "object"
                    },
                    "ExpressionTool": {
                      "description": "An ExpressionTool is a type of Process object that can be run by itself\nor as a Workflow step. It executes a pure Javascript expression that has\naccess to the same input parameters as a workflow. It is meant to be used\nsparingly as a way to isolate complex Javascript expressions that need to\noperate on input data and produce some result; perhaps just a\nrearrangement of the inputs. No Docker software container is required\nor allowed.",
                      "properties": {
                        "class": {
                          "const": "ExpressionTool",
                          "type": "string"
                        },
                        "cwlVersion": {
                          "description": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.",
                          "enum": [
                            "draft-2",
                            "draft-3",
                            "draft-3.dev1",
                            "draft-3.dev2",
                            "draft-3.dev3",
                            "draft-3.dev4",
                            "draft-3.dev5",
                            "draft-4.dev1",
                            "draft-4.dev2",
                            "draft-4.dev3",
                            "v1.0",
                            "v1.0.dev4",
                            "v1.1",
                            "v1.1.0-dev1",
                            "v1.2",
                            "v1.2.0-dev1",
                            "v1.2.0-dev2",
                            "v1.2.0-dev3",
                            "v1.2.0-dev4",
                            "v1.2.0-dev5"
                          ],
                          "type": "string"
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "expression": {
                          "description": "The expression to execute.  The expression must return a plain\nJavascript object which matches the output parameters of the\nExpressionTool.",
                          "type": "string"
                        },
                        "hints": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "id": {
                          "description": "The unique identifier for this object.\n\nOnly useful for `$graph` at `Process` level. Should not be exposed\nto users in graphical or terminal user interfaces.",
                          "type": "string"
                        },
                        "inputs": {
                          "description": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/WorkflowInputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/WorkflowInputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/InputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/InputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/WorkflowInputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "intent": {
                          "description": "An identifier for the type of computational operation, of this Process.\nEspecially useful for [`Operation`](Workflow.html#Operation), but can also be used for\n[`CommandLineTool`](CommandLineTool.html#CommandLineTool),\n[`Workflow`](Workflow.html#Workflow), or [ExpressionTool](Workflow.html#ExpressionTool).\n\nIf provided, then this must be an IRI of a concept node that\nrepresents the type of operation, preferably defined within an ontology.\n\nFor example, in the domain of bioinformatics, one can use an IRI from\nthe EDAM Ontology's [Operation concept nodes](http://edamontology.org/operation_0004),\nlike [Alignment](http://edamontology.org/operation_2928),\nor [Clustering](http://edamontology.org/operation_3432); or a more\nspecific Operation concept like\n[Split read mapping](http://edamontology.org/operation_3199).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "outputs": {
                          "description": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/ExpressionToolOutputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/ExpressionToolOutputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/OutputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/OutputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter.\nNote that this field just acts as a hint, as the outputs of an\nExpressionTool process are always considered valid."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/ExpressionToolOutputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "requirements": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "expression",
                        "inputs",
                        "outputs"
                      ],
                      "type": "object"
                    },
                    "ExpressionToolOutputParameter": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#ExpressionToolOutputParameter",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/OutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/OutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter.\nNote that this field just acts as a hint, as the outputs of an\nExpressionTool process are always considered valid."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "Fetcher": {
                      "oneOf": [
                        {
                          "$ref": "#/definitions/DefaultFetcher"
                        }
                      ]
                    },
                    "File": {
                      "additionalProperties": false,
                      "description": "Represents a file (or group of files when `secondaryFiles` is provided) that\nwill be accessible by tools using standard POSIX file system call API such as\nopen(2) and read(2).\n\nFiles are represented as objects with `class` of `File`.  File objects have\na number of properties that provide metadata about the file.\n\nThe `location` property of a File is a IRI that uniquely identifies the\nfile.  Implementations must support the `file://` IRI scheme and may support\nother schemes such as `http://` and `https://`.  The value of `location` may also be a\nrelative reference, in which case it must be resolved relative to the IRI\nof the document it appears in.  Alternately to `location`, implementations\nmust also accept the `path` property on File, which must be a filesystem\npath available on the same host as the CWL runner (for inputs) or the\nruntime environment of a command line tool execution (for command line tool\noutputs).\n\nIf no `location` or `path` is specified, a file object must specify\n`contents` with the UTF-8 text content of the file.  This is a \"file\nliteral\".  File literals do not correspond to external resources, but are\ncreated on disk with `contents` with when needed for executing a tool.\nWhere appropriate, expressions can return file literals to define new files\non a runtime.  The maximum size of `contents` is 64 kilobytes.\n\nThe `basename` property defines the filename on disk where the file is\nstaged.  This may differ from the resource name.  If not provided,\n`basename` must be computed from the last path part of `location` and made\navailable to expressions.\n\nThe `secondaryFiles` property is a list of File or Directory objects that\nmust be staged in the same directory as the primary file.  It is an error\nfor file names to be duplicated in `secondaryFiles`.\n\nThe `size` property is the size in bytes of the File.  It must be computed\nfrom the resource and made available to expressions.  The `checksum` field\ncontains a cryptographic hash of the file content for use it verifying file\ncontents.  Implementations may, at user option, enable or disable\ncomputation of the `checksum` field for performance or other reasons.\nHowever, the ability to compute output checksums is required to pass the\nCWL conformance test suite.\n\nWhen executing a CommandLineTool, the files and secondary files may be\nstaged to an arbitrary directory, but must use the value of `basename` for\nthe filename.  The `path` property must be file path in the context of the\ntool execution runtime (local to the compute node, or within the executing\ncontainer).  All computed properties should be available to expressions.\nFile literals also must be staged and `path` must be set.\n\nWhen collecting CommandLineTool outputs, `glob` matching returns file paths\n(with the `path` property) and the derived properties. This can all be\nmodified by `outputEval`.  Alternately, if the file `cwl.output.json` is\npresent in the output, `outputBinding` is ignored.\n\nFile objects in the output must provide either a `location` IRI or a `path`\nproperty in the context of the tool execution runtime (local to the compute\nnode, or within the executing container).\n\nWhen evaluating an ExpressionTool, file objects must be referenced via\n`location` (the expression tool does not have access to files on disk so\n`path` is meaningless) or as file literals.  It is legal to return a file\nobject with an existing `location` but a different `basename`.  The\n`loadContents` field of ExpressionTool inputs behaves the same as on\nCommandLineTool inputs, however it is not meaningful on the outputs.\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.",
                      "properties": {
                        "basename": {
                          "description": "The base name of the file, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.",
                          "type": "string"
                        },
                        "checksum": {
                          "description": "Optional hash code for validating file integrity.  Currently, must be in the form\n\"sha1$ + hexadecimal string\" using the SHA-1 algorithm.",
                          "type": "string"
                        },
                        "class": {
                          "const": "File",
                          "description": "Must be `File` to indicate this object describes a file.",
                          "type": "string"
                        },
                        "contents": {
                          "description": "File contents literal.\n\nIf neither `location` nor `path` is provided, `contents` must be\nnon-null.  The implementation must assign a unique identifier for the\n`location` field.  When the file is staged as input to CommandLineTool,\nthe value of `contents` must be written to a file.\n\nIf `contents` is set as a result of a Javascript expression,\nan `entry` in `InitialWorkDirRequirement`, or read in from\n`cwl.output.json`, there is no specified upper limit on the\nsize of `contents`.  Implementations may have practical limits\non the size of `contents` based on memory and storage\navailable to the workflow runner or other factors.\n\nIf the `loadContents` field of an `InputParameter` or\n`OutputParameter` is true, and the input or output File object\n`location` is valid, the file must be a UTF-8 text file 64 KiB\nor smaller, and the implementation must read the entire\ncontents of the file and place it in the `contents` field.  If\nthe size of the file is greater than 64 KiB, the\nimplementation must raise a fatal error.",
                          "type": "string"
                        },
                        "dirname": {
                          "description": "The name of the directory containing file, that is, the path leading up\nto the final slash in the path such that `dirname + '/' + basename ==\npath`.\n\nThe implementation must set this field based on the value of `path`\nprior to evaluating parameter references or expressions in a\nCommandLineTool document.  This field must not be used in any other\ncontext.",
                          "type": "string"
                        },
                        "format": {
                          "description": "The format of the file: this must be an IRI of a concept node that\nrepresents the file format, preferably defined within an ontology.\nIf no ontology is available, file formats may be tested by exact match.\n\nReasoning about format compatibility must be done by checking that an\ninput file format is the same, `owl:equivalentClass` or\n`rdfs:subClassOf` the format required by the input parameter.\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\n`<B> owl:equivalentClass <C>` and `<B> owl:subclassOf <A>` then infer\n`<C> owl:subclassOf <A>`.\n\nFile format ontologies may be provided in the \"$schemas\" metadata at the\nroot of the document.  If no ontologies are specified in `$schemas`, the\nruntime may perform exact file format matches.",
                          "type": "string"
                        },
                        "location": {
                          "description": "An IRI that identifies the file resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource; the\nimplementation must use the IRI to retrieve file content.  If an\nimplementation is unable to retrieve the file content stored at a\nremote resource (due to unsupported protocol, access denied, or other\nissue) it must signal an error.\n\nIf the `location` field is not provided, the `contents` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.",
                          "type": "string"
                        },
                        "nameext": {
                          "description": "The basename extension such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  Leading periods on the basename are ignored; a basename of\n`.cshrc` will have an empty `nameext`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.",
                          "type": "string"
                        },
                        "nameroot": {
                          "description": "The basename root such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  For the purposes of path splitting leading periods on the\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\n`.cshrc`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.",
                          "type": "string"
                        },
                        "path": {
                          "description": "The local host path where the File is available when a CommandLineTool is\nexecuted.  This field must be set by the implementation.  The final\npath component must match the value of `basename`.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to access the file at `path` using the POSIX\n`open(2)` syscall.\n\nAs a special case, if the `path` field is provided but the `location`\nfield is not, an implementation may assign the value of the `path`\nfield to `location`, and remove the `path` field.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.",
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "description": "A list of additional files or directories that are associated with the\nprimary file and must be transferred alongside the primary file.\nExamples include indexes of the primary file, or external references\nwhich must be included when loading primary document.  A file object\nlisted in `secondaryFiles` may itself include `secondaryFiles` for\nwhich the same rules apply.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/Directory"
                              },
                              {
                                "$ref": "#/definitions/File"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "size": {
                          "description": "Optional file size (in bytes)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "InitialWorkDirRequirement": {
                      "additionalProperties": false,
                      "description": "Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool.\nNormally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for [`Dirent.entryname`](#Dirent). Together with `DockerRequirement.dockerOutputDirectory` it is possible to control the locations of both input and output files when running in containers.",
                      "properties": {
                        "class": {
                          "const": "InitialWorkDirRequirement",
                          "description": "InitialWorkDirRequirement",
                          "type": "string"
                        },
                        "listing": {
                          "anyOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/Directory"
                                      },
                                      {
                                        "$ref": "#/definitions/File"
                                      },
                                      {
                                        "items": {
                                          "anyOf": [
                                            {
                                              "anyOf": [
                                                {
                                                  "$ref": "#/definitions/Directory"
                                                },
                                                {
                                                  "$ref": "#/definitions/File"
                                                }
                                              ]
                                            },
                                            {
                                              "$ref": "#/definitions/CWLImportManual"
                                            },
                                            {
                                              "$ref": "#/definitions/CWLIncludeManual"
                                            }
                                          ]
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "$ref": "#/definitions/Dirent"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "The list of files or subdirectories that must be staged prior\nto executing the command line tool.\n\nReturn type of each expression must validate as `[\"null\",\nFile, Directory, Dirent, {type: array, items: [File,\nDirectory]}]`.\n\nEach `File` or `Directory` that is returned by an Expression\nmust be added to the designated output directory prior to\nexecuting the tool.\n\nEach `Dirent` record that is listed or returned by an\nexpression specifies a file to be created or staged in the\ndesignated output directory prior to executing the tool.\n\nExpressions may return null, in which case they have no effect.\n\nFiles or Directories which are listed in the input parameters\nand appear in the `InitialWorkDirRequirement` listing must\nhave their `path` set to their staged location.  If the same\nFile or Directory appears more than once in the\n`InitialWorkDirRequirement` listing, the implementation must\nchoose exactly one value for `path`; how this value is chosen\nis undefined."
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "InlineJavascriptRequirement": {
                      "additionalProperties": false,
                      "description": "Indicates that the workflow platform must support inline Javascript expressions.\nIf this requirement is not present, the workflow platform must not perform expression\ninterpolation.",
                      "properties": {
                        "class": {
                          "const": "InlineJavascriptRequirement",
                          "description": "Always 'InlineJavascriptRequirement'",
                          "type": "string"
                        },
                        "expressionLib": {
                          "description": "Additional code fragments that will also be inserted\nbefore executing the expression code.  Allows for function definitions that may\nbe called from CWL expressions.",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "InplaceUpdateRequirement": {
                      "additionalProperties": false,
                      "description": "If `inplaceUpdate` is true, then an implementation supporting this\nfeature may permit tools to directly update files with `writable:\ntrue` in InitialWorkDirRequirement.  That is, as an optimization,\nfiles may be destructively modified in place as opposed to copied\nand updated.\n\nAn implementation must ensure that only one workflow step may\naccess a writable file at a time.  It is an error if a file which\nis writable by one workflow step file is accessed (for reading or\nwriting) by any other workflow step running independently.\nHowever, a file which has been updated in a previous completed\nstep may be used as input to multiple steps, provided it is\nread-only in every step.\n\nWorkflow steps which modify a file must produce the modified file\nas output.  Downstream steps which further process the file must\nuse the output of previous steps, and not refer to a common input\n(this is necessary for both ordering and correctness).\n\nWorkflow authors should provide this in the `hints` section.  The\nintent of this feature is that workflows produce the same results\nwhether or not InplaceUpdateRequirement is supported by the\nimplementation, and this feature is primarily available as an\noptimization for particular environments.\n\nUsers and implementers should be aware that workflows that\ndestructively modify inputs may not be repeatable or reproducible.\nIn particular, enabling this feature implies that WorkReuse should\nnot be enabled.",
                      "properties": {
                        "class": {
                          "const": "InplaceUpdateRequirement",
                          "description": "Always 'InplaceUpdateRequirement'",
                          "type": "string"
                        },
                        "inplaceUpdate": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "class",
                        "inplaceUpdate"
                      ],
                      "type": "object"
                    },
                    "InputArraySchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputArraySchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/InputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/InputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/InputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/InputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Defines the type of the array elements."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "array",
                          "description": "Must be `array`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "type"
                      ],
                      "type": "object"
                    },
                    "InputBinding": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputBinding",
                      "properties": {
                        "loadContents": {
                          "description": "Use of `loadContents` in `InputBinding` is deprecated.\nPreserved for v1.0 backwards compatibility.  Will be removed in\nCWL v2.0.  Use `InputParameter.loadContents` instead.",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "InputEnumSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputEnumSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "symbols": {
                          "description": "Defines the set of valid symbols.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "const": "enum",
                          "description": "Must be `enum`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "symbols",
                        "type"
                      ],
                      "type": "object"
                    },
                    "InputRecordField": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "loadContents": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                              "type": "boolean"
                            },
                            "loadListing": {
                              "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                              "enum": [
                                "deep_listing",
                                "no_listing",
                                "shallow_listing"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/InputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/InputEnumSchema"
                                },
                                {
                                  "$ref": "#/definitions/InputArraySchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/InputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/InputEnumSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/InputArraySchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/InputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/InputEnumSchema"
                              },
                              {
                                "$ref": "#/definitions/InputArraySchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/InputEnumSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/InputArraySchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        }
                      ]
                    },
                    "InputRecordSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "fields": {
                          "description": "Defines the fields of the record.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/InputRecordField"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "$ref": "#/definitions/InputRecordFieldMap"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "record",
                          "description": "Must be `record`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "LoadListingRequirement": {
                      "additionalProperties": false,
                      "description": "Specify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.",
                      "properties": {
                        "class": {
                          "const": "LoadListingRequirement",
                          "description": "Always 'LoadListingRequirement'",
                          "type": "string"
                        },
                        "loadListing": {
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "LoadingOptions": {
                      "additionalProperties": false,
                      "properties": {
                        "container": {
                          "type": "string"
                        },
                        "copyFrom": {
                          "$ref": "#/definitions/LoadingOptions"
                        },
                        "fetcher": {
                          "$ref": "#/definitions/Fetcher"
                        },
                        "fileUri": {
                          "type": "string"
                        },
                        "idx": {
                          "$ref": "#/definitions/Dictionary<any>"
                        },
                        "namespaces": {
                          "$ref": "#/definitions/Dictionary<string>"
                        },
                        "noLinkCheck": {
                          "type": "boolean"
                        },
                        "originalDoc": {},
                        "rvocab": {
                          "$ref": "#/definitions/Dictionary<string>"
                        },
                        "schemas": {
                          "$ref": "#/definitions/Dictionary<string>"
                        },
                        "vocab": {
                          "$ref": "#/definitions/Dictionary<string>"
                        }
                      },
                      "required": [
                        "fetcher",
                        "idx",
                        "originalDoc",
                        "rvocab",
                        "vocab"
                      ],
                      "type": "object"
                    },
                    "MultipleInputFeatureRequirement": {
                      "additionalProperties": false,
                      "description": "Indicates that the workflow platform must support multiple inbound data links\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput).",
                      "properties": {
                        "class": {
                          "const": "MultipleInputFeatureRequirement",
                          "description": "Always 'MultipleInputFeatureRequirement'",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "NetworkAccess": {
                      "additionalProperties": false,
                      "description": "Indicate whether a process requires outgoing IPv4/IPv6 network\naccess.  Choice of IPv4 or IPv6 is implementation and site\nspecific, correct tools must support both.\n\nIf `networkAccess` is false or not specified, tools must not\nassume network access, except for localhost (the loopback device).\n\nIf `networkAccess` is true, the tool must be able to make outgoing\nconnections to network resources.  Resources may be on a private\nsubnet or the public Internet.  However, implementations and sites\nmay apply their own security policies to restrict what is\naccessible by the tool.\n\nEnabling network access does not imply a publicly routable IP\naddress or the ability to accept inbound connections.",
                      "properties": {
                        "class": {
                          "const": "NetworkAccess",
                          "description": "Always 'NetworkAccess'",
                          "type": "string"
                        },
                        "networkAccess": {
                          "type": [
                            "string",
                            "boolean"
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "networkAccess"
                      ],
                      "type": "object"
                    },
                    "Operation": {
                      "additionalProperties": false,
                      "description": "This record describes an abstract operation.  It is a potential\nstep of a workflow that has not yet been bound to a concrete\nimplementation.  It specifies an input and output signature, but\ndoes not provide enough information to be executed.  An\nimplementation (or other tooling) may provide a means of binding\nan Operation to a concrete process (such as Workflow,\nCommandLineTool, or ExpressionTool) with a compatible signature.",
                      "properties": {
                        "class": {
                          "const": "Operation",
                          "type": "string"
                        },
                        "cwlVersion": {
                          "description": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.",
                          "enum": [
                            "draft-2",
                            "draft-3",
                            "draft-3.dev1",
                            "draft-3.dev2",
                            "draft-3.dev3",
                            "draft-3.dev4",
                            "draft-3.dev5",
                            "draft-4.dev1",
                            "draft-4.dev2",
                            "draft-4.dev3",
                            "v1.0",
                            "v1.0.dev4",
                            "v1.1",
                            "v1.1.0-dev1",
                            "v1.2",
                            "v1.2.0-dev1",
                            "v1.2.0-dev2",
                            "v1.2.0-dev3",
                            "v1.2.0-dev4",
                            "v1.2.0-dev5"
                          ],
                          "type": "string"
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "hints": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "id": {
                          "description": "The unique identifier for this object.\n\nOnly useful for `$graph` at `Process` level. Should not be exposed\nto users in graphical or terminal user interfaces.",
                          "type": "string"
                        },
                        "inputs": {
                          "description": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/OperationInputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/OperationInputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/InputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/InputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/OperationInputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "intent": {
                          "description": "An identifier for the type of computational operation, of this Process.\nEspecially useful for [`Operation`](Workflow.html#Operation), but can also be used for\n[`CommandLineTool`](CommandLineTool.html#CommandLineTool),\n[`Workflow`](Workflow.html#Workflow), or [ExpressionTool](Workflow.html#ExpressionTool).\n\nIf provided, then this must be an IRI of a concept node that\nrepresents the type of operation, preferably defined within an ontology.\n\nFor example, in the domain of bioinformatics, one can use an IRI from\nthe EDAM Ontology's [Operation concept nodes](http://edamontology.org/operation_0004),\nlike [Alignment](http://edamontology.org/operation_2928),\nor [Clustering](http://edamontology.org/operation_3432); or a more\nspecific Operation concept like\n[Split read mapping](http://edamontology.org/operation_3199).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "outputs": {
                          "description": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/OperationOutputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/OperationOutputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/OutputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/OutputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/OperationOutputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "requirements": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "inputs",
                        "outputs"
                      ],
                      "type": "object"
                    },
                    "OperationInputParameter": {
                      "additionalProperties": false,
                      "description": "Describe an input parameter of an operation.",
                      "properties": {
                        "default": {
                          "description": "The default value to use for this parameter if the parameter is missing\nfrom the input object, or if the value of the parameter in the input\nobject is `null`.  Default values are applied before evaluating expressions\n(e.g. dependent `valueFrom` fields)."
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "loadContents": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                          "type": "boolean"
                        },
                        "loadListing": {
                          "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/InputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/InputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/InputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/InputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "OperationOutputParameter": {
                      "additionalProperties": false,
                      "description": "Describe an output parameter of an operation.",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/OutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/OutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "OutputArraySchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputArraySchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/OutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/OutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Defines the type of the array elements."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "array",
                          "description": "Must be `array`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "type"
                      ],
                      "type": "object"
                    },
                    "OutputEnumSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputEnumSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "symbols": {
                          "description": "Defines the set of valid symbols.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "const": "enum",
                          "description": "Must be `enum`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "symbols",
                        "type"
                      ],
                      "type": "object"
                    },
                    "OutputRecordField": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                              "type": "string"
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/OutputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/OutputEnumSchema"
                                },
                                {
                                  "$ref": "#/definitions/OutputArraySchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/OutputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/OutputEnumSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/OutputArraySchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "required": [
                            "name",
                            "type"
                          ],
                          "type": "object"
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/OutputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/OutputEnumSchema"
                              },
                              {
                                "$ref": "#/definitions/OutputArraySchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/OutputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/OutputEnumSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/OutputArraySchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        }
                      ]
                    },
                    "OutputRecordSchema": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordSchema",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "fields": {
                          "description": "Defines the fields of the record.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/OutputRecordField"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "$ref": "#/definitions/OutputRecordFieldMap"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "name": {
                          "description": "The identifier for this type",
                          "type": "string"
                        },
                        "type": {
                          "const": "record",
                          "description": "Must be `record`",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "ResourceRequirement": {
                      "additionalProperties": false,
                      "description": "Specify basic hardware resource requirements.\n\n\"min\" is the minimum amount of a resource that must be reserved to\nschedule a job. If \"min\" cannot be satisfied, the job should not\nbe run.\n\n\"max\" is the maximum amount of a resource that the job shall be\nallocated. If a node has sufficient resources, multiple jobs may\nbe scheduled on a single node provided each job's \"max\" resource\nrequirements are met. If a job attempts to exceed its resource\nallocation, an implementation may deny additional resources, which\nmay result in job failure.\n\nIf both \"min\" and \"max\" are specified, an implementation may\nchoose to allocate any amount between \"min\" and \"max\", with the\nactual allocation provided in the `runtime` object.\n\nIf \"min\" is specified but \"max\" is not, then \"max\" == \"min\"\nIf \"max\" is specified by \"min\" is not, then \"min\" == \"max\".\n\nIt is an error if max < min.\n\nIt is an error if the value of any of these fields is negative.\n\nIf neither \"min\" nor \"max\" is specified for a resource, use the default values below.",
                      "properties": {
                        "class": {
                          "const": "ResourceRequirement",
                          "description": "Always 'ResourceRequirement'",
                          "type": "string"
                        },
                        "coresMax": {
                          "description": "Maximum reserved number of CPU cores.\n\nSee `coresMin` for discussion about fractional CPU requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "coresMin": {
                          "description": "Minimum reserved number of CPU cores (default is 1).\n\nMay be a fractional value to indicate to a scheduling\nalgorithm that one core can be allocated to multiple\njobs. For example, a value of 0.25 indicates that up to 4\njobs may run in parallel on 1 core.  A value of 1.25 means\nthat up to 3 jobs can run on a 4 core system (4/1.25 ≈ 3).\n\nProcesses can only share a core allocation if the sum of each\nof their `ramMax`, `tmpdirMax`, and `outdirMax` requests also\ndo not exceed the capacity of the node.\n\nProcesses sharing a core must have the same level of isolation\n(typically a container or VM) that they would normally have.\n\nThe reported number of CPU cores reserved for the process,\nwhich is available to expressions on the CommandLineTool as\n`runtime.cores`, must be a non-zero integer, and may be\ncalculated by rounding up the cores request to the next whole\nnumber.\n\nScheduling systems may allocate fractional CPU resources by\nsetting quotas or scheduling weights.  Scheduling systems that\ndo not support fractional CPUs may round up the request to the\nnext whole number.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "outdirMax": {
                          "description": "Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\n\nSee `outdirMin` for discussion about fractional storage requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "outdirMin": {
                          "description": "Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) (default is 1024)\n\nMay be a fractional value.  If so, the actual storage request\nmust be rounded up to the next whole number.  The reported\namount of storage reserved for the process, which is available\nto expressions on the CommandLineTool as `runtime.outdirSize`,\nmust be a non-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "ramMax": {
                          "description": "Maximum reserved RAM in mebibytes (2**20)\n\nSee `ramMin` for discussion about fractional RAM requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "ramMin": {
                          "description": "Minimum reserved RAM in mebibytes (2**20) (default is 256)\n\nMay be a fractional value.  If so, the actual RAM request must\nbe rounded up to the next whole number.  The reported amount of\nRAM reserved for the process, which is available to\nexpressions on the CommandLineTool as `runtime.ram`, must be a\nnon-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "tmpdirMax": {
                          "description": "Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\n\nSee `tmpdirMin` for discussion about fractional storage requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "tmpdirMin": {
                          "description": "Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) (default is 1024)\n\nMay be a fractional value.  If so, the actual storage request\nmust be rounded up to the next whole number.  The reported\namount of storage reserved for the process, which is available\nto expressions on the CommandLineTool as `runtime.tmpdirSize`,\nmust be a non-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "ScatterFeatureRequirement": {
                      "additionalProperties": false,
                      "description": "Indicates that the workflow platform must support the `scatter` and\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep).",
                      "properties": {
                        "class": {
                          "const": "ScatterFeatureRequirement",
                          "description": "Always 'ScatterFeatureRequirement'",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "SchemaDefRequirement": {
                      "additionalProperties": false,
                      "description": "This field consists of an array of type definitions which must be used when\ninterpreting the `inputs` and `outputs` fields.  When a `type` field\ncontains a IRI, the implementation must check if the type is defined in\n`schemaDefs` and use that definition.  If the type is not found in\n`schemaDefs`, it is an error.  The entries in `schemaDefs` must be\nprocessed in the order listed such that later schema definitions may refer\nto earlier schema definitions.\n\n- **Type definitions are allowed for `enum` and `record` types only.**\n- Type definitions may be shared by defining them in a file and then\n  `$include`-ing them in the `types` field.\n- A file can contain a list of type definitions",
                      "properties": {
                        "class": {
                          "const": "SchemaDefRequirement",
                          "description": "Always 'SchemaDefRequirement'",
                          "type": "string"
                        },
                        "types": {
                          "description": "The list of type definitions.",
                          "items": {
                            "anyOf": [
                              {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandInputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputEnumSchema"
                                  }
                                ]
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "class",
                        "types"
                      ],
                      "type": "object"
                    },
                    "SecondaryFileSchema": {
                      "description": "Secondary files are specified using the following micro-DSL for secondary files:\n\n* If the value is a string, it is transformed to an object with two fields\n  `pattern` and `required`\n* By default, the value of `required` is `null`\n  (this indicates default behavior, which may be based on the context)\n* If the value ends with a question mark `?` the question mark is\n  stripped off and the value of the field `required` is set to `False`\n* The remaining value is assigned to the field `pattern`\n\nFor implementation details and examples, please see\n[this section](SchemaSalad.html#Domain_Specific_Language_for_secondary_files)\nin the Schema Salad specification.",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "pattern": {
                              "description": "Provides a pattern or expression specifying files or directories that\nshould be included alongside the primary file.\n\nIf the value is an expression, the value of `self` in the\nexpression must be the primary input or output File object to\nwhich this binding applies.  The `basename`, `nameroot` and\n`nameext` fields must be present in `self`.  For\n`CommandLineTool` inputs the `location` field must also be\npresent.  For `CommandLineTool` outputs the `path` field must\nalso be present.  If secondary files were included on an input\nFile object as part of the Process invocation, they must also\nbe present in `secondaryFiles` on `self`.\n\nThe expression must return either: a filename string relative\nto the path to the primary File, a File or Directory object\n(`class: File` or `class: Directory`) with either `location`\n(for inputs) or `path` (for outputs) and `basename` fields\nset, or an array consisting of strings or File or Directory\nobjects as previously described.\n\nIt is legal to use `location` from a File or Directory object\npassed in as input, including `location` from secondary files\non `self`.  If an expression returns a File object with the\nsame `location` but a different `basename` as a secondary file\nthat was passed in, the expression result takes precedence.\nSetting the basename with an expression this way affects the\n`path` where the secondary file will be staged to in the\nCommandLineTool.\n\nThe expression may return \"null\" in which case there is no\nsecondary file from that expression.\n\nTo work on non-filename-preserving storage systems, portable\ntool descriptions should treat `location` as an\n[opaque identifier](#opaque-strings) and avoid constructing new\nvalues from `location`, but should construct relative references\nusing `basename` or `nameroot` instead, or propagate `location`\nfrom defined inputs.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path.",
                              "type": "string"
                            },
                            "required": {
                              "description": "An implementation must not fail workflow execution if `required` is\nset to `false` and the expected secondary file does not exist.\nDefault value for `required` field is `true` for secondary files on\ninput and `false` for secondary files on output.",
                              "type": [
                                "string",
                                "boolean"
                              ]
                            }
                          },
                          "required": [
                            "pattern"
                          ],
                          "type": "object"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "ShellCommandRequirement": {
                      "additionalProperties": false,
                      "description": "Modify the behavior of CommandLineTool to generate a single string\ncontaining a shell command line.  Each item in the `arguments` list must\nbe joined into a string separated by single spaces and quoted to prevent\ninterpretation by the shell, unless `CommandLineBinding` for that argument\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\nargument is joined into the command string without quoting, which allows\nthe use of shell metacharacters such as `|` for pipes.",
                      "properties": {
                        "class": {
                          "const": "ShellCommandRequirement",
                          "description": "Always 'ShellCommandRequirement'",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "SoftwarePackage": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#SoftwarePackage",
                      "properties": {
                        "package": {
                          "description": "The name of the software to be made available. If the name is\ncommon, inconsistent, or otherwise ambiguous it should be combined with\none or more identifiers in the `specs` field.",
                          "type": "string"
                        },
                        "specs": {
                          "description": "One or more [IRI](https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier)s\nidentifying resources for installing or enabling the software named in\nthe `package` field. Implementations may provide resolvers which map\nthese software identifier IRIs to some configuration action; or they can\nuse only the name from the `package` field on a best effort basis.\n\nFor example, the IRI https://packages.debian.org/bowtie could\nbe resolved with `apt-get install bowtie`. The IRI\nhttps://anaconda.org/bioconda/bowtie could be resolved with `conda\ninstall -c bioconda bowtie`.\n\nIRIs can also be system independent and used to map to a specific\nsoftware installation or selection mechanism.\nUsing [RRID](https://www.identifiers.org/rrid/) as an example:\nhttps://identifiers.org/rrid/RRID:SCR_005476\ncould be fulfilled using the above-mentioned Debian or bioconda\npackage, a local installation managed by [Environment Modules](https://modules.sourceforge.net/),\nor any other mechanism the platform chooses. IRIs can also be from\nidentifier sources that are discipline specific yet still system\nindependent. As an example, the equivalent [ELIXIR Tools and Data\nService Registry](https://bio.tools) IRI to the previous RRID example is\nhttps://bio.tools/tool/bowtie2/version/2.2.8.\nIf supported by a given registry, implementations are encouraged to\nquery these system independent software identifier IRIs directly for\nlinks to packaging systems.\n\nA site specific IRI can be listed as well. For example, an academic\ncomputing cluster using Environment Modules could list the IRI\n`https://hpc.example.edu/modules/bowtie-tbb/1.22` to indicate that\n`module load bowtie-tbb/1.1.2` should be executed to make available\n`bowtie` version 1.1.2 compiled with the TBB library prior to running\nthe accompanying Workflow or CommandLineTool. Note that the example IRI\nis specific to a particular institution and computing environment as\nthe Environment Modules system does not have a common namespace or\nstandardized naming convention.\n\nThis last example is the least portable and should only be used if\nmechanisms based off of the `package` field or more generic IRIs are\nunavailable or unsuitable. While harmless to other sites, site specific\nsoftware IRIs should be left out of shared CWL descriptions to avoid\nclutter.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "version": {
                          "description": "The (optional) versions of the software that are known to be\ncompatible.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "package"
                      ],
                      "type": "object"
                    },
                    "SoftwareRequirement": {
                      "additionalProperties": false,
                      "description": "A list of software packages that should be configured in the environment of\nthe defined process.",
                      "properties": {
                        "class": {
                          "const": "SoftwareRequirement",
                          "description": "Always 'SoftwareRequirement'",
                          "type": "string"
                        },
                        "packages": {
                          "description": "The list of software to be configured.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/SoftwarePackage"
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "class",
                        "packages"
                      ],
                      "type": "object"
                    },
                    "StepInputExpressionRequirement": {
                      "additionalProperties": false,
                      "description": "Indicate that the workflow platform must support the `valueFrom` field\nof [WorkflowStepInput](#WorkflowStepInput).",
                      "properties": {
                        "class": {
                          "const": "StepInputExpressionRequirement",
                          "description": "Always 'StepInputExpressionRequirement'",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "SubworkflowFeatureRequirement": {
                      "additionalProperties": false,
                      "description": "Indicates that the workflow platform must support nested workflows in\nthe `run` field of [WorkflowStep](#WorkflowStep).",
                      "properties": {
                        "class": {
                          "const": "SubworkflowFeatureRequirement",
                          "description": "Always 'SubworkflowFeatureRequirement'",
                          "type": "string"
                        }
                      },
                      "required": [
                        "class"
                      ],
                      "type": "object"
                    },
                    "T": {
                      "additionalProperties": false,
                      "type": "object"
                    },
                    "ToolTimeLimit": {
                      "additionalProperties": false,
                      "description": "Set an upper limit on the execution time of a CommandLineTool.\nA CommandLineTool whose execution duration exceeds the time\nlimit may be preemptively terminated and considered failed.\nMay also be used by batch systems to make scheduling decisions.\nThe execution duration excludes external operations, such as\nstaging of files, pulling a docker image etc, and only counts\nwall-time for the execution of the command line itself.",
                      "properties": {
                        "class": {
                          "const": "ToolTimeLimit",
                          "description": "Always 'ToolTimeLimit'",
                          "type": "string"
                        },
                        "timelimit": {
                          "description": "The time limit, in seconds.  A time limit of zero means no\ntime limit.  Negative time limits are an error.",
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "timelimit"
                      ],
                      "type": "object"
                    },
                    "WorkReuse": {
                      "additionalProperties": false,
                      "description": "For implementations that support reusing output from past work (on\nthe assumption that same code and same input produce same\nresults), control whether to enable or disable the reuse behavior\nfor a particular tool or step (to accommodate situations where that\nassumption is incorrect).  A reused step is not executed but\ninstead returns the same output as the original execution.\n\nIf `WorkReuse` is not specified, correct tools should assume it\nis enabled by default.",
                      "properties": {
                        "class": {
                          "const": "WorkReuse",
                          "description": "Always 'WorkReuse'",
                          "type": "string"
                        },
                        "enableReuse": {
                          "type": [
                            "string",
                            "boolean"
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "enableReuse"
                      ],
                      "type": "object"
                    },
                    "Workflow": {
                      "description": "A workflow describes a set of **steps** and the **dependencies** between\nthose steps.  When a step produces output that will be consumed by a\nsecond step, the first step is a dependency of the second step.\n\nWhen there is a dependency, the workflow engine must execute the preceding\nstep and wait for it to successfully produce output before executing the\ndependent step.  If two steps are defined in the workflow graph that\nare not directly or indirectly dependent, these steps are **independent**,\nand may execute in any order or execute concurrently.  A workflow is\ncomplete when all steps have been executed.\n\nDependencies between parameters are expressed using the `source`\nfield on [workflow step input parameters](#WorkflowStepInput) and\n`outputSource` field on [workflow output\nparameters](#WorkflowOutputParameter).\n\nThe `source` field on each workflow step input parameter expresses\nthe data links that contribute to the value of the step input\nparameter (the \"sink\").  A workflow step can only begin execution\nwhen every data link connected to a step has been fulfilled.\n\nThe `outputSource` field on each workflow step input parameter\nexpresses the data links that contribute to the value of the\nworkflow output parameter (the \"sink\").  Workflow execution cannot\ncomplete successfully until every data link connected to an output\nparameter has been fulfilled.\n\n## Workflow success and failure\n\nA completed step must result in one of `success`, `temporaryFailure` or\n`permanentFailure` states.  An implementation may choose to retry a step\nexecution which resulted in `temporaryFailure`.  An implementation may\nchoose to either continue running other steps of a workflow, or terminate\nimmediately upon `permanentFailure`.\n\n* If any step of a workflow execution results in `permanentFailure`, then\nthe workflow status is `permanentFailure`.\n\n* If one or more steps result in `temporaryFailure` and all other steps\ncomplete `success` or are not executed, then the workflow status is\n`temporaryFailure`.\n\n* If all workflow steps are executed and complete with `success`, then the\nworkflow status is `success`.\n\n# Extensions\n\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) and\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) are\navailable as standard [extensions](#Extensions_and_Metadata) to core\nworkflow semantics.",
                      "properties": {
                        "class": {
                          "const": "Workflow",
                          "type": "string"
                        },
                        "cwlVersion": {
                          "description": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.",
                          "enum": [
                            "draft-2",
                            "draft-3",
                            "draft-3.dev1",
                            "draft-3.dev2",
                            "draft-3.dev3",
                            "draft-3.dev4",
                            "draft-3.dev5",
                            "draft-4.dev1",
                            "draft-4.dev2",
                            "draft-4.dev3",
                            "v1.0",
                            "v1.0.dev4",
                            "v1.1",
                            "v1.1.0-dev1",
                            "v1.2",
                            "v1.2.0-dev1",
                            "v1.2.0-dev2",
                            "v1.2.0-dev3",
                            "v1.2.0-dev4",
                            "v1.2.0-dev5"
                          ],
                          "type": "string"
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "hints": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "id": {
                          "description": "The unique identifier for this object.\n\nOnly useful for `$graph` at `Process` level. Should not be exposed\nto users in graphical or terminal user interfaces.",
                          "type": "string"
                        },
                        "inputs": {
                          "description": "Defines the input parameters of the process.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used to build a user\ninterface for constructing the input object.\n\nWhen accepting an input object, all input parameters must have a value.\nIf an input parameter is missing from the input object, it must be\nassigned a value of `null` (or the value of `default` for that\nparameter, if provided) for the purposes of validation and evaluation\nof expressions.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/WorkflowInputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/WorkflowInputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/InputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/InputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/InputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/InputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/WorkflowInputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "intent": {
                          "description": "An identifier for the type of computational operation, of this Process.\nEspecially useful for [`Operation`](Workflow.html#Operation), but can also be used for\n[`CommandLineTool`](CommandLineTool.html#CommandLineTool),\n[`Workflow`](Workflow.html#Workflow), or [ExpressionTool](Workflow.html#ExpressionTool).\n\nIf provided, then this must be an IRI of a concept node that\nrepresents the type of operation, preferably defined within an ontology.\n\nFor example, in the domain of bioinformatics, one can use an IRI from\nthe EDAM Ontology's [Operation concept nodes](http://edamontology.org/operation_0004),\nlike [Alignment](http://edamontology.org/operation_2928),\nor [Clustering](http://edamontology.org/operation_3432); or a more\nspecific Operation concept like\n[Split read mapping](http://edamontology.org/operation_3199).",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "outputs": {
                          "description": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/WorkflowOutputParameter"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/WorkflowOutputParameter"
                                    },
                                    {
                                      "anyOf": [
                                        {
                                          "$ref": "#/definitions/OutputRecordSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputEnumSchema"
                                        },
                                        {
                                          "$ref": "#/definitions/OutputArraySchema"
                                        },
                                        {
                                          "items": {
                                            "anyOf": [
                                              {
                                                "$ref": "#/definitions/OutputRecordSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputEnumSchema"
                                              },
                                              {
                                                "$ref": "#/definitions/OutputArraySchema"
                                              },
                                              {
                                                "type": "string"
                                              }
                                            ]
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "string"
                                        }
                                      ],
                                      "description": "Specify valid types of data that may be assigned to this parameter."
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/WorkflowOutputParameter"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "requirements": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this process.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "steps": {
                          "description": "The individual steps that make up the workflow.  Each step is executed when all of its\ninput data links are fulfilled.  An implementation may choose to execute\nthe steps in a different order than listed and/or execute steps\nconcurrently, provided that dependencies between steps are met.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/WorkflowStep"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "$ref": "#/definitions/WorkflowStep"
                                }
                              },
                              "type": "object"
                            }
                          ]
                        }
                      },
                      "required": [
                        "class",
                        "inputs",
                        "outputs",
                        "steps"
                      ],
                      "type": "object"
                    },
                    "WorkflowInputParameter": {
                      "additionalProperties": false,
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowInputParameter",
                      "properties": {
                        "default": {
                          "description": "The default value to use for this parameter if the parameter is missing\nfrom the input object, or if the value of the parameter in the input\nobject is `null`.  Default values are applied before evaluating expressions\n(e.g. dependent `valueFrom` fields)."
                        },
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "inputBinding": {
                          "$ref": "#/definitions/InputBinding",
                          "description": "Deprecated.  Preserved for v1.0 backwards compatibility.  Will be removed in\nCWL v2.0.  Use `WorkflowInputParameter.loadContents` instead."
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "loadContents": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                          "type": "boolean"
                        },
                        "loadListing": {
                          "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/InputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/InputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/InputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/InputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/InputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "WorkflowOutputParameter": {
                      "additionalProperties": false,
                      "description": "Describe an output parameter of a workflow.  The parameter must be\nconnected to one or more parameters defined in the workflow that\nwill provide the value of the output parameter. It is legal to\nconnect a WorkflowInputParameter to a WorkflowOutputParameter.\n\nSee [WorkflowStepInput](#WorkflowStepInput) for discussion of\n`linkMerge` and `pickValue`.",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "format": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "linkMerge": {
                          "description": "The method to use to merge multiple sources into a single array.\nIf not specified, the default method is \"merge_nested\".",
                          "enum": [
                            "merge_flattened",
                            "merge_nested"
                          ],
                          "type": "string"
                        },
                        "outputSource": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specifies one or more names of an output from a workflow step (in the form\n`step_name/output_name` with a `/` separator`), or a workflow input name,\nthat supply their value(s) to the output parameter.\nthe output parameter.  It is valid to reference workflow level inputs\nhere."
                        },
                        "pickValue": {
                          "description": "The method to use to choose non-null elements among multiple sources.",
                          "enum": [
                            "all_non_null",
                            "first_non_null",
                            "the_only_non_null"
                          ],
                          "type": "string"
                        },
                        "secondaryFiles": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            {
                              "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                              },
                              "type": "array"
                            }
                          ],
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                        },
                        "streamable": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                          "type": "boolean"
                        },
                        "type": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/OutputRecordSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputEnumSchema"
                            },
                            {
                              "$ref": "#/definitions/OutputArraySchema"
                            },
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/OutputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputEnumSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/OutputArraySchema"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specify valid types of data that may be assigned to this parameter."
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "WorkflowStep": {
                      "additionalProperties": false,
                      "description": "A workflow step is an executable element of a workflow.  It specifies the\nunderlying process implementation (such as `CommandLineTool` or another\n`Workflow`) in the `run` field and connects the input and output parameters\nof the underlying process to workflow parameters.\n\n# Scatter/gather\n\nTo use scatter/gather,\n[ScatterFeatureRequirement](#ScatterFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nA \"scatter\" operation specifies that the associated workflow step or\nsubworkflow should execute separately over a list of input elements.  Each\njob making up a scatter operation is independent and may be executed\nconcurrently.\n\nThe `scatter` field specifies one or more input parameters which will be\nscattered.  An input parameter may be listed more than once.  The declared\ntype of each input parameter implicitly becomes an array of items of the\ninput parameter type.  If a parameter is listed more than once, it becomes\na nested array.  As a result, upstream parameters which are connected to\nscattered parameters must be arrays.\n\nAll output parameter types are also implicitly wrapped in arrays.  Each job\nin the scatter results in an entry in the output array.\n\nIf any scattered parameter runtime value is an empty array, all outputs are\nset to empty arrays and no work is done for the step, according to\napplicable scattering rules.\n\nIf `scatter` declares more than one input parameter, `scatterMethod`\ndescribes how to decompose the input into a discrete set of jobs.\n\n  * **dotproduct** specifies that each of the input arrays are aligned and one\n      element taken from each array to construct each job.  It is an error\n      if all input arrays are not the same length.\n\n  * **nested_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output must be nested arrays for each level of scattering, in the\n      order that the input arrays are listed in the `scatter` field.\n\n  * **flat_crossproduct** specifies the Cartesian product of the inputs,\n      producing a job for every combination of the scattered inputs.  The\n      output arrays must be flattened to a single level, but otherwise listed in the\n      order that the input arrays are listed in the `scatter` field.\n\n# Conditional execution (Optional)\n\nConditional execution makes execution of a step conditional on an\nexpression.  A step that is not executed is \"skipped\".  A skipped\nstep produces `null` for all output parameters.\n\nThe condition is evaluated after `scatter`, using the input object\nof each individual scatter job.  This means over a set of scatter\njobs, some may be executed and some may be skipped.  When the\nresults are gathered, skipped steps must be `null` in the output\narrays.\n\nThe `when` field controls conditional execution.  This is an\nexpression that must be evaluated with `inputs` bound to the step\ninput object (or individual scatter job), and returns a boolean\nvalue.  It is an error if this expression returns a value other\nthan `true` or `false`.\n\nConditionals in CWL are an optional feature and are not required\nto be implemented by all consumers of CWL documents.  An\nimplementation that does not support conditionals must return a\nfatal error when attempting to execute a workflow that uses\nconditional constructs the implementation does not support.\n\n# Subworkflows\n\nTo specify a nested workflow as part of a workflow step,\n[SubworkflowFeatureRequirement](#SubworkflowFeatureRequirement) must be\nspecified in the workflow or workflow step requirements.\n\nIt is a fatal error if a workflow directly or indirectly invokes itself as\na subworkflow (recursive workflows are not allowed).",
                      "properties": {
                        "doc": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "A documentation string for this object, or an array of strings which should be concatenated."
                        },
                        "hints": {
                          "description": "Declares hints applying to either the runtime environment or the\nworkflow engine that may be helpful in executing this workflow step.  It is\nnot an error if an implementation cannot satisfy all hints, however\nthe implementation may report a warning.",
                          "items": {},
                          "type": "array"
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "in": {
                          "description": "Defines the input parameters of the workflow step.  The process is ready to\nrun when all required input parameters are associated with concrete\nvalues.  Input parameters include a schema for each parameter which is\nused to validate the input object.  It may also be used build a user\ninterface for constructing the input object.",
                          "oneOf": [
                            {
                              "items": {
                                "$ref": "#/definitions/WorkflowStepInput"
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/WorkflowStepInput"
                                    },
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "oneOf": [
                                          {
                                            "type": "string"
                                          },
                                          {
                                            "$ref": "#/definitions/WorkflowStepInput"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "type": "object"
                            }
                          ]
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "out": {
                          "description": "Defines the parameters representing the output of the process.  May be\nused to generate and/or validate the output object.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/WorkflowStepOutput"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "requirements": {
                          "description": "Declares requirements that apply to either the runtime environment or the\nworkflow engine that must be met in order to execute this workflow step.  If\nan implementation cannot satisfy all requirements, or a requirement is\nlisted which is not recognized by the implementation, it is a fatal\nerror and the implementation must not attempt to run the process,\nunless overridden at user option.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  },
                                  {
                                    "$ref": "#/definitions/InlineJavascriptRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SchemaDefRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/LoadListingRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/DockerRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/SoftwareRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/InitialWorkDirRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/EnvVarRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ShellCommandRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ResourceRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/WorkReuse"
                                  },
                                  {
                                    "$ref": "#/definitions/NetworkAccess"
                                  },
                                  {
                                    "$ref": "#/definitions/InplaceUpdateRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ToolTimeLimit"
                                  },
                                  {
                                    "$ref": "#/definitions/SubworkflowFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/ScatterFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/MultipleInputFeatureRequirement"
                                  },
                                  {
                                    "$ref": "#/definitions/StepInputExpressionRequirement"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "InlineJavascriptRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InlineJavascriptRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SchemaDefRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SchemaDefRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "LoadListingRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/LoadListingRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "DockerRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/DockerRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SoftwareRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SoftwareRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InitialWorkDirRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InitialWorkDirRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "EnvVarRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/EnvVarRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ShellCommandRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ShellCommandRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ResourceRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ResourceRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "WorkReuse": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/WorkReuseMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "NetworkAccess": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/NetworkAccessMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "InplaceUpdateRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InplaceUpdateRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ToolTimeLimit": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ToolTimeLimitMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "SubworkflowFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SubworkflowFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "ScatterFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/ScatterFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "MultipleInputFeatureRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/MultipleInputFeatureRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                },
                                "StepInputExpressionRequirement": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/StepInputExpressionRequirementMap"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {},
                                      "additionalProperties": false
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "run": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandLineTool"
                            },
                            {
                              "$ref": "#/definitions/ExpressionTool"
                            },
                            {
                              "$ref": "#/definitions/Workflow"
                            },
                            {
                              "$ref": "#/definitions/Operation"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specifies the process to run.  If `run` is a string, it must be an absolute IRI\nor a relative path from the primary document."
                        },
                        "scatter": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "scatterMethod": {
                          "description": "Required if `scatter` is an array of more than one element.",
                          "enum": [
                            "dotproduct",
                            "flat_crossproduct",
                            "nested_crossproduct"
                          ],
                          "type": "string"
                        },
                        "when": {
                          "description": "If defined, only run the step when the expression evaluates to\n`true`.  If `false` the step is skipped.  A skipped step\nproduces a `null` on each output.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "in",
                        "out",
                        "run"
                      ],
                      "type": "object"
                    },
                    "WorkflowStepInput": {
                      "additionalProperties": false,
                      "description": "The input of a workflow step connects an upstream parameter (from the\nworkflow inputs, or the outputs of other workflows steps) with the input\nparameters of the process specified by the `run` field. Only input parameters\ndeclared by the target process will be passed through at runtime to the process\nthough additional parameters may be specified (for use within `valueFrom`\nexpressions for instance) - unconnected or unused parameters do not represent an\nerror condition.\n\n# Input object\n\nA WorkflowStepInput object must contain an `id` field in the form\n`#fieldname` or `#prefix/fieldname`.  When the `id` field contains a slash\n`/` the field name consists of the characters following the final slash\n(the prefix portion may contain one or more slashes to indicate scope).\nThis defines a field of the workflow step input object with the value of\nthe `source` parameter(s).\n\n# Merging multiple inbound data links\n\nTo merge multiple inbound data links,\n[MultipleInputFeatureRequirement](#MultipleInputFeatureRequirement) must be specified\nin the workflow or workflow step requirements.\n\nIf the sink parameter is an array, or named in a [workflow\nscatter](#WorkflowStep) operation, there may be multiple inbound\ndata links listed in the `source` field.  The values from the\ninput links are merged depending on the method specified in the\n`linkMerge` field.  If both `linkMerge` and `pickValue` are null\nor not specified, and there is more than one element in the\n`source` array, the default method is \"merge_nested\".\n\nIf both `linkMerge` and `pickValue` are null or not specified, and\nthere is only a single element in the `source`, then the input\nparameter takes the scalar value from the single input link (it is\n*not* wrapped in a single-list).\n\n* **merge_nested**\n\n  The input must be an array consisting of exactly one entry for each\n  input link.  If \"merge_nested\" is specified with a single link, the value\n  from the link must be wrapped in a single-item list.\n\n* **merge_flattened**\n\n  1. The source and sink parameters must be compatible types, or the source\n     type must be compatible with single element from the \"items\" type of\n     the destination array parameter.\n  2. Source parameters which are arrays are concatenated.\n     Source parameters which are single element types are appended as\n     single elements.\n\n# Picking non-null values among inbound data links\n\nIf present, `pickValue` specifies how to pick non-null values among inbound data links.\n\n`pickValue` is evaluated\n  1. Once all source values from upstream step or parameters are available.\n  2. After `linkMerge`.\n  3. Before `scatter` or `valueFrom`.\n\nThis is specifically intended to be useful in combination with\n[conditional execution](#WorkflowStep), where several upstream\nsteps may be connected to a single input (`source` is a list), and\nskipped steps produce null values.\n\nStatic type checkers should check for type consistency after inferring what the type\nwill be after `pickValue` is applied, just as they do currently for `linkMerge`.\n\n* **first_non_null**\n\n  For the first level of a list input, pick the first non-null element.  The result is a scalar.\n  It is an error if there is no non-null element.  Examples:\n  * `[null, x, null, y] -> x`\n  * `[null, [null], null, y] -> [null]`\n  * `[null, null, null] -> Runtime Error`\n\n  *Intended use case*: If-else pattern where the\n  value comes either from a conditional step or from a default or\n  fallback value. The conditional step(s) should be placed first in\n  the list.\n\n* **the_only_non_null**\n\n  For the first level of a list input, pick the single non-null element.  The result is a scalar.\n  It is an error if there is more than one non-null element.  Examples:\n\n  * `[null, x, null] -> x`\n  * `[null, x, null, y] -> Runtime Error`\n  * `[null, [null], null] -> [null]`\n  * `[null, null, null] -> Runtime Error`\n\n  *Intended use case*: Switch type patterns where developer considers\n  more than one active code path as a workflow error\n  (possibly indicating an error in writing `when` condition expressions).\n\n* **all_non_null**\n\n  For the first level of a list input, pick all non-null values.\n  The result is a list, which may be empty.  Examples:\n\n  * `[null, x, null] -> [x]`\n  * `[x, null, y] -> [x, y]`\n  * `[null, [x], [null]] -> [[x], [null]]`\n  * `[null, null, null] -> []`\n\n  *Intended use case*: It is valid to have more than one source, but\n   sources are conditional, so null sources (from skipped steps)\n   should be filtered out.",
                      "properties": {
                        "default": {
                          "description": "The default value for this parameter to use if either there is no\n`source` field, or the value produced by the `source` is `null`.  The\ndefault must be applied prior to scattering or evaluating `valueFrom`."
                        },
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        },
                        "label": {
                          "description": "A short, human-readable label of this object.",
                          "type": "string"
                        },
                        "linkMerge": {
                          "description": "The method to use to merge multiple inbound links into a single array.\nIf not specified, the default method is \"merge_nested\".",
                          "enum": [
                            "merge_flattened",
                            "merge_nested"
                          ],
                          "type": "string"
                        },
                        "loadContents": {
                          "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                          "type": "boolean"
                        },
                        "loadListing": {
                          "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        },
                        "pickValue": {
                          "description": "The method to use to choose non-null elements among multiple sources.",
                          "enum": [
                            "all_non_null",
                            "first_non_null",
                            "the_only_non_null"
                          ],
                          "type": "string"
                        },
                        "source": {
                          "anyOf": [
                            {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Specifies one or more workflow parameters that will provide input to\nthe underlying step parameter."
                        },
                        "valueFrom": {
                          "description": "To use valueFrom, [StepInputExpressionRequirement](#StepInputExpressionRequirement) must\nbe specified in the workflow or workflow step requirements.\n\nIf `valueFrom` is a constant string value, use this as the value for\nthis input parameter.\n\nIf `valueFrom` is a parameter reference or expression, it must be\nevaluated to yield the actual value to be assigned to the input field.\n\nThe `self` value in the parameter reference or expression must be\n1. `null` if there is no `source` field\n2. the value of the parameter(s) specified in the `source` field when this\nworkflow input parameter **is not** specified in this workflow step's `scatter` field.\n3. an element of the parameter specified in the `source` field when this workflow input\nparameter **is** specified in this workflow step's `scatter` field.\n\nThe value of `inputs` in the parameter reference or expression must be\nthe input object to the workflow step after assigning the `source`\nvalues, applying `default`, and then scattering.  The order of\nevaluating `valueFrom` among step input parameters is undefined and the\nresult of evaluating `valueFrom` on a parameter must not be visible to\nevaluation of `valueFrom` on other parameters.",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "WorkflowStepOutput": {
                      "additionalProperties": false,
                      "description": "Associate an output parameter of the underlying process with a workflow\nparameter.  The workflow parameter (given in the `id` field) be may be used\nas a `source` to connect with input parameters of other workflow steps, or\nwith an output parameter of the process.\n\nA unique identifier for this workflow output parameter.  This is\nthe identifier to use in the `source` field of `WorkflowStepInput`\nto connect the output value to downstream parameters.",
                      "properties": {
                        "id": {
                          "description": "The unique identifier for this object.",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "CWLImportManual": {
                      "description": "Represents an '$import' directive that should point toward another compatible CWL file to import where specified. The contents of the imported file should be relevant contextually where it is being imported",
                      "$comment": "The schema validation of the CWL will not itself perform the '$import' to resolve and validate its contents. Therefore, the complete schema will not be validated entirely, and could still be partially malformed. To ensure proper and exhaustive validation of a CWL definition with this schema, all '$import' directives should be resolved and extended beforehand",
                      "type": "object",
                      "properties": {
                        "$import": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "$import"
                      ],
                      "additionalProperties": false
                    },
                    "CWLIncludeManual": {
                      "description": "Represents an '$include' directive that should point toward another compatible CWL file to import where specified. The contents of the imported file should be relevant contextually where it is being imported",
                      "$comment": "The schema validation of the CWL will not itself perform the '$include' to resolve and validate its contents. Therefore, the complete schema will not be validated entirely, and could still be partially malformed. To ensure proper and exhaustive validation of a CWL definition with this schema, all '$include' directives should be resolved and extended beforehand",
                      "type": "object",
                      "properties": {
                        "$include": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "$include"
                      ],
                      "additionalProperties": false
                    },
                    "CWLDocumentMetadata": {
                      "description": "Metadata for a CWL document",
                      "type": "object",
                      "properties": {
                        "$namespaces": {
                          "description": "The namespaces used in the document",
                          "type": "object",
                          "patternProperties": {
                            "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                              "type": "string"
                            }
                          }
                        },
                        "$schemas": {
                          "description": "The schemas used in the document",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "patternProperties": {
                        "^\\w+:.*$": {
                          "type": "object"
                        },
                        "^\\w+:\\/\\/.*": {
                          "type": "object"
                        }
                      },
                      "required": []
                    },
                    "CommandInputRecordFieldMap": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandInputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                            },
                            "inputBinding": {
                              "$ref": "#/definitions/CommandLineBinding",
                              "description": "Describes how to turn this object into command line arguments."
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "loadContents": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                              "type": "boolean"
                            },
                            "loadListing": {
                              "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                              "enum": [
                                "deep_listing",
                                "no_listing",
                                "shallow_listing"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/CommandInputArraySchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandInputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandInputEnumSchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/CommandInputArraySchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandInputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandInputEnumSchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "type": "object",
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/CommandInputArraySchema"
                              },
                              {
                                "$ref": "#/definitions/CommandInputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/CommandInputEnumSchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/CommandInputArraySchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandInputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandInputEnumSchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "InputRecordFieldMap": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "loadContents": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                              "type": "boolean"
                            },
                            "loadListing": {
                              "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                              "enum": [
                                "deep_listing",
                                "no_listing",
                                "shallow_listing"
                              ],
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/InputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/InputEnumSchema"
                                },
                                {
                                  "$ref": "#/definitions/InputArraySchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/InputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/InputEnumSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/InputArraySchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "type": "object",
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/InputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/InputEnumSchema"
                              },
                              {
                                "$ref": "#/definitions/InputArraySchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/InputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/InputEnumSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/InputArraySchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "CommandOutputRecordFieldMap": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#CommandOutputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                              "type": "string"
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "outputBinding": {
                              "$ref": "#/definitions/CommandOutputBinding",
                              "description": "Describes how to generate this output object based on the files\nproduced by a CommandLineTool"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/CommandOutputArraySchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandOutputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/CommandOutputEnumSchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/CommandOutputArraySchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandOutputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/CommandOutputEnumSchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "type": "object",
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/CommandOutputArraySchema"
                              },
                              {
                                "$ref": "#/definitions/CommandOutputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/CommandOutputEnumSchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/CommandOutputArraySchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandOutputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/CommandOutputEnumSchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "OutputRecordFieldMap": {
                      "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#OutputRecordField",
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "doc": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "A documentation string for this object, or an array of strings which should be concatenated."
                            },
                            "format": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis is the file format that will be assigned to the output\nFile object.",
                              "type": "string"
                            },
                            "label": {
                              "description": "A short, human-readable label of this object.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name of the field",
                              "type": "string"
                            },
                            "secondaryFiles": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/SecondaryFileSchema"
                                },
                                {
                                  "items": {
                                    "$ref": "#/definitions/SecondaryFileSchema"
                                  },
                                  "type": "array"
                                }
                              ],
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                            },
                            "streamable": {
                              "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                              "type": "boolean"
                            },
                            "type": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/OutputRecordSchema"
                                },
                                {
                                  "$ref": "#/definitions/OutputEnumSchema"
                                },
                                {
                                  "$ref": "#/definitions/OutputArraySchema"
                                },
                                {
                                  "items": {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/OutputRecordSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/OutputEnumSchema"
                                      },
                                      {
                                        "$ref": "#/definitions/OutputArraySchema"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "string"
                                }
                              ],
                              "description": "The field type"
                            }
                          },
                          "type": "object",
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/OutputRecordSchema"
                              },
                              {
                                "$ref": "#/definitions/OutputEnumSchema"
                              },
                              {
                                "$ref": "#/definitions/OutputArraySchema"
                              },
                              {
                                "items": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/OutputRecordSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/OutputEnumSchema"
                                    },
                                    {
                                      "$ref": "#/definitions/OutputArraySchema"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "type": "array"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "The field type"
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "InlineJavascriptRequirementMap": {
                      "type": "object",
                      "properties": {
                        "expressionLib": {
                          "description": "Additional code fragments that will also be inserted\nbefore executing the expression code.  Allows for function definitions that may\nbe called from CWL expressions.",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [],
                      "description": "Indicates that the workflow platform must support inline Javascript expressions.\nIf this requirement is not present, the workflow platform must not perform expression\ninterpolation."
                    },
                    "SchemaDefRequirementMap": {
                      "type": "object",
                      "properties": {
                        "types": {
                          "description": "The list of type definitions.",
                          "items": {
                            "anyOf": [
                              {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/CommandInputArraySchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputRecordSchema"
                                  },
                                  {
                                    "$ref": "#/definitions/CommandInputEnumSchema"
                                  }
                                ]
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "types"
                      ],
                      "description": "This field consists of an array of type definitions which must be used when\ninterpreting the `inputs` and `outputs` fields.  When a `type` field\ncontains a IRI, the implementation must check if the type is defined in\n`schemaDefs` and use that definition.  If the type is not found in\n`schemaDefs`, it is an error.  The entries in `schemaDefs` must be\nprocessed in the order listed such that later schema definitions may refer\nto earlier schema definitions.\n\n- **Type definitions are allowed for `enum` and `record` types only.**\n- Type definitions may be shared by defining them in a file and then\n  `$include`-ing them in the `types` field.\n- A file can contain a list of type definitions"
                    },
                    "LoadListingRequirementMap": {
                      "type": "object",
                      "properties": {
                        "loadListing": {
                          "enum": [
                            "deep_listing",
                            "no_listing",
                            "shallow_listing"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [],
                      "description": "Specify the desired behavior for loading the `listing` field of\na Directory object for use by expressions."
                    },
                    "DockerRequirementMap": {
                      "type": "object",
                      "properties": {
                        "dockerFile": {
                          "description": "Supply the contents of a Dockerfile which will be built using `docker build`.",
                          "type": "string"
                        },
                        "dockerImageId": {
                          "description": "The image id that will be used for `docker run`.  May be a\nhuman-readable image name or the image identifier hash.  May be skipped\nif `dockerPull` is specified, in which case the `dockerPull` image id\nmust be used.",
                          "type": "string"
                        },
                        "dockerImport": {
                          "description": "Provide HTTP URL to download and gunzip a Docker images using `docker import.",
                          "type": "string"
                        },
                        "dockerLoad": {
                          "description": "Specify an HTTP URL from which to download a Docker image using `docker load`.",
                          "type": "string"
                        },
                        "dockerOutputDirectory": {
                          "description": "Set the designated output directory to a specific location inside the\nDocker container.",
                          "type": "string"
                        },
                        "dockerPull": {
                          "description": "Specify a Docker image to retrieve using `docker pull`. Can contain the\nimmutable digest to ensure an exact container is used:\n`dockerPull: ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2`",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "description": "Indicates that a workflow component should be run in a\n[Docker](https://docker.com) or Docker-compatible (such as\n[Singularity](https://www.sylabs.io/) and [udocker](https://github.com/indigo-dc/udocker)) container environment and\nspecifies how to fetch or build the image.\n\nIf a CommandLineTool lists `DockerRequirement` under\n`hints` (or `requirements`), it may (or must) be run in the specified Docker\ncontainer.\n\nThe platform must first acquire or install the correct Docker image as\nspecified by `dockerPull`, `dockerImport`, `dockerLoad` or `dockerFile`.\n\nThe platform must execute the tool in the container using `docker run` with\nthe appropriate Docker image and tool command line.\n\nThe workflow platform may provide input files and the designated output\ndirectory through the use of volume bind mounts.  The platform should rewrite\nfile paths in the input object to correspond to the Docker bind mounted\nlocations. That is, the platform should rewrite values in the parameter context\nsuch as `runtime.outdir`, `runtime.tmpdir` and others to be valid paths\nwithin the container. The platform must ensure that `runtime.outdir` and\n`runtime.tmpdir` are distinct directories.\n\nWhen running a tool contained in Docker, the workflow platform must not\nassume anything about the contents of the Docker container, such as the\npresence or absence of specific software, except to assume that the\ngenerated command line represents a valid command within the runtime\nenvironment of the container.\n\nA container image may specify an\n[ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint)\nand/or\n[CMD](https://docs.docker.com/engine/reference/builder/#cmd).\nCommand line arguments will be appended after all elements of\nENTRYPOINT, and will override all elements specified using CMD (in\nother words, CMD is only used when the CommandLineTool definition\nproduces an empty command line).\n\nUse of implicit ENTRYPOINT or CMD are discouraged due to reproducibility\nconcerns of the implicit hidden execution point (For further discussion, see\n[https://doi.org/10.12688/f1000research.15140.1](https://doi.org/10.12688/f1000research.15140.1)). Portable\nCommandLineTool wrappers in which use of a container is optional must not rely on ENTRYPOINT or CMD.\nCommandLineTools which do rely on ENTRYPOINT or CMD must list `DockerRequirement` in the\n`requirements` section.\n\n## Interaction with other requirements\n\nIf [EnvVarRequirement](#EnvVarRequirement) is specified alongside a\nDockerRequirement, the environment variables must be provided to Docker\nusing `--env` or `--env-file` and interact with the container's preexisting\nenvironment as defined by Docker."
                    },
                    "SoftwareRequirementMap": {
                      "type": "object",
                      "properties": {
                        "packages": {
                          "description": "The list of software to be configured.",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/SoftwarePackage"
                              },
                              {
                                "$ref": "#/definitions/CWLImportManual"
                              },
                              {
                                "$ref": "#/definitions/CWLIncludeManual"
                              }
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "required": [
                        "packages"
                      ],
                      "description": "A list of software packages that should be configured in the environment of\nthe defined process."
                    },
                    "InitialWorkDirRequirementMap": {
                      "type": "object",
                      "properties": {
                        "listing": {
                          "anyOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "anyOf": [
                                      {
                                        "$ref": "#/definitions/Directory"
                                      },
                                      {
                                        "$ref": "#/definitions/File"
                                      },
                                      {
                                        "items": {
                                          "anyOf": [
                                            {
                                              "anyOf": [
                                                {
                                                  "$ref": "#/definitions/Directory"
                                                },
                                                {
                                                  "$ref": "#/definitions/File"
                                                }
                                              ]
                                            },
                                            {
                                              "$ref": "#/definitions/CWLImportManual"
                                            },
                                            {
                                              "$ref": "#/definitions/CWLIncludeManual"
                                            }
                                          ]
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "$ref": "#/definitions/Dirent"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "The list of files or subdirectories that must be staged prior\nto executing the command line tool.\n\nReturn type of each expression must validate as `[\"null\",\nFile, Directory, Dirent, {type: array, items: [File,\nDirectory]}]`.\n\nEach `File` or `Directory` that is returned by an Expression\nmust be added to the designated output directory prior to\nexecuting the tool.\n\nEach `Dirent` record that is listed or returned by an\nexpression specifies a file to be created or staged in the\ndesignated output directory prior to executing the tool.\n\nExpressions may return null, in which case they have no effect.\n\nFiles or Directories which are listed in the input parameters\nand appear in the `InitialWorkDirRequirement` listing must\nhave their `path` set to their staged location.  If the same\nFile or Directory appears more than once in the\n`InitialWorkDirRequirement` listing, the implementation must\nchoose exactly one value for `path`; how this value is chosen\nis undefined."
                        }
                      },
                      "required": [],
                      "description": "Define a list of files and subdirectories that must be staged by the workflow platform prior to executing the command line tool.\nNormally files are staged within the designated output directory. However, when running inside containers, files may be staged at arbitrary locations, see discussion for [`Dirent.entryname`](#Dirent). Together with `DockerRequirement.dockerOutputDirectory` it is possible to control the locations of both input and output files when running in containers."
                    },
                    "EnvVarRequirementMap": {
                      "type": "object",
                      "properties": {
                        "envDef": {
                          "description": "The list of environment variables.",
                          "oneOf": [
                            {
                              "items": {
                                "anyOf": [
                                  {
                                    "$ref": "#/definitions/EnvironmentDef"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLImportManual"
                                  },
                                  {
                                    "$ref": "#/definitions/CWLIncludeManual"
                                  }
                                ]
                              },
                              "type": "array"
                            },
                            {
                              "patternProperties": {
                                "^[_a-zA-Z][a-zA-Z0-9_-]*$": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "envDef"
                      ],
                      "description": "Define a list of environment variables which will be set in the\nexecution environment of the tool.  See `EnvironmentDef` for details."
                    },
                    "ShellCommandRequirementMap": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "description": "Modify the behavior of CommandLineTool to generate a single string\ncontaining a shell command line.  Each item in the `arguments` list must\nbe joined into a string separated by single spaces and quoted to prevent\ninterpretation by the shell, unless `CommandLineBinding` for that argument\ncontains `shellQuote: false`.  If `shellQuote: false` is specified, the\nargument is joined into the command string without quoting, which allows\nthe use of shell metacharacters such as `|` for pipes."
                    },
                    "ResourceRequirementMap": {
                      "type": "object",
                      "properties": {
                        "coresMax": {
                          "description": "Maximum reserved number of CPU cores.\n\nSee `coresMin` for discussion about fractional CPU requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "coresMin": {
                          "description": "Minimum reserved number of CPU cores (default is 1).\n\nMay be a fractional value to indicate to a scheduling\nalgorithm that one core can be allocated to multiple\njobs. For example, a value of 0.25 indicates that up to 4\njobs may run in parallel on 1 core.  A value of 1.25 means\nthat up to 3 jobs can run on a 4 core system (4/1.25 ≈ 3).\n\nProcesses can only share a core allocation if the sum of each\nof their `ramMax`, `tmpdirMax`, and `outdirMax` requests also\ndo not exceed the capacity of the node.\n\nProcesses sharing a core must have the same level of isolation\n(typically a container or VM) that they would normally have.\n\nThe reported number of CPU cores reserved for the process,\nwhich is available to expressions on the CommandLineTool as\n`runtime.cores`, must be a non-zero integer, and may be\ncalculated by rounding up the cores request to the next whole\nnumber.\n\nScheduling systems may allocate fractional CPU resources by\nsetting quotas or scheduling weights.  Scheduling systems that\ndo not support fractional CPUs may round up the request to the\nnext whole number.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "outdirMax": {
                          "description": "Maximum reserved filesystem based storage for the designated output directory, in mebibytes (2**20)\n\nSee `outdirMin` for discussion about fractional storage requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "outdirMin": {
                          "description": "Minimum reserved filesystem based storage for the designated output directory, in mebibytes (2**20) (default is 1024)\n\nMay be a fractional value.  If so, the actual storage request\nmust be rounded up to the next whole number.  The reported\namount of storage reserved for the process, which is available\nto expressions on the CommandLineTool as `runtime.outdirSize`,\nmust be a non-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "ramMax": {
                          "description": "Maximum reserved RAM in mebibytes (2**20)\n\nSee `ramMin` for discussion about fractional RAM requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "ramMin": {
                          "description": "Minimum reserved RAM in mebibytes (2**20) (default is 256)\n\nMay be a fractional value.  If so, the actual RAM request must\nbe rounded up to the next whole number.  The reported amount of\nRAM reserved for the process, which is available to\nexpressions on the CommandLineTool as `runtime.ram`, must be a\nnon-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "tmpdirMax": {
                          "description": "Maximum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20)\n\nSee `tmpdirMin` for discussion about fractional storage requests.",
                          "type": [
                            "string",
                            "number"
                          ]
                        },
                        "tmpdirMin": {
                          "description": "Minimum reserved filesystem based storage for the designated temporary directory, in mebibytes (2**20) (default is 1024)\n\nMay be a fractional value.  If so, the actual storage request\nmust be rounded up to the next whole number.  The reported\namount of storage reserved for the process, which is available\nto expressions on the CommandLineTool as `runtime.tmpdirSize`,\nmust be a non-zero integer.",
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "required": [],
                      "description": "Specify basic hardware resource requirements.\n\n\"min\" is the minimum amount of a resource that must be reserved to\nschedule a job. If \"min\" cannot be satisfied, the job should not\nbe run.\n\n\"max\" is the maximum amount of a resource that the job shall be\nallocated. If a node has sufficient resources, multiple jobs may\nbe scheduled on a single node provided each job's \"max\" resource\nrequirements are met. If a job attempts to exceed its resource\nallocation, an implementation may deny additional resources, which\nmay result in job failure.\n\nIf both \"min\" and \"max\" are specified, an implementation may\nchoose to allocate any amount between \"min\" and \"max\", with the\nactual allocation provided in the `runtime` object.\n\nIf \"min\" is specified but \"max\" is not, then \"max\" == \"min\"\nIf \"max\" is specified by \"min\" is not, then \"min\" == \"max\".\n\nIt is an error if max < min.\n\nIt is an error if the value of any of these fields is negative.\n\nIf neither \"min\" nor \"max\" is specified for a resource, use the default values below."
                    },
                    "WorkReuseMap": {
                      "type": "object",
                      "properties": {
                        "enableReuse": {
                          "type": [
                            "string",
                            "boolean"
                          ]
                        }
                      },
                      "required": [
                        "enableReuse"
                      ],
                      "description": "For implementations that support reusing output from past work (on\nthe assumption that same code and same input produce same\nresults), control whether to enable or disable the reuse behavior\nfor a particular tool or step (to accommodate situations where that\nassumption is incorrect).  A reused step is not executed but\ninstead returns the same output as the original execution.\n\nIf `WorkReuse` is not specified, correct tools should assume it\nis enabled by default."
                    },
                    "NetworkAccessMap": {
                      "type": "object",
                      "properties": {
                        "networkAccess": {
                          "type": [
                            "string",
                            "boolean"
                          ]
                        }
                      },
                      "required": [
                        "networkAccess"
                      ],
                      "description": "Indicate whether a process requires outgoing IPv4/IPv6 network\naccess.  Choice of IPv4 or IPv6 is implementation and site\nspecific, correct tools must support both.\n\nIf `networkAccess` is false or not specified, tools must not\nassume network access, except for localhost (the loopback device).\n\nIf `networkAccess` is true, the tool must be able to make outgoing\nconnections to network resources.  Resources may be on a private\nsubnet or the public Internet.  However, implementations and sites\nmay apply their own security policies to restrict what is\naccessible by the tool.\n\nEnabling network access does not imply a publicly routable IP\naddress or the ability to accept inbound connections."
                    },
                    "InplaceUpdateRequirementMap": {
                      "type": "object",
                      "properties": {
                        "inplaceUpdate": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "inplaceUpdate"
                      ],
                      "description": "If `inplaceUpdate` is true, then an implementation supporting this\nfeature may permit tools to directly update files with `writable:\ntrue` in InitialWorkDirRequirement.  That is, as an optimization,\nfiles may be destructively modified in place as opposed to copied\nand updated.\n\nAn implementation must ensure that only one workflow step may\naccess a writable file at a time.  It is an error if a file which\nis writable by one workflow step file is accessed (for reading or\nwriting) by any other workflow step running independently.\nHowever, a file which has been updated in a previous completed\nstep may be used as input to multiple steps, provided it is\nread-only in every step.\n\nWorkflow steps which modify a file must produce the modified file\nas output.  Downstream steps which further process the file must\nuse the output of previous steps, and not refer to a common input\n(this is necessary for both ordering and correctness).\n\nWorkflow authors should provide this in the `hints` section.  The\nintent of this feature is that workflows produce the same results\nwhether or not InplaceUpdateRequirement is supported by the\nimplementation, and this feature is primarily available as an\noptimization for particular environments.\n\nUsers and implementers should be aware that workflows that\ndestructively modify inputs may not be repeatable or reproducible.\nIn particular, enabling this feature implies that WorkReuse should\nnot be enabled."
                    },
                    "ToolTimeLimitMap": {
                      "type": "object",
                      "properties": {
                        "timelimit": {
                          "description": "The time limit, in seconds.  A time limit of zero means no\ntime limit.  Negative time limits are an error.",
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      },
                      "required": [
                        "timelimit"
                      ],
                      "description": "Set an upper limit on the execution time of a CommandLineTool.\nA CommandLineTool whose execution duration exceeds the time\nlimit may be preemptively terminated and considered failed.\nMay also be used by batch systems to make scheduling decisions.\nThe execution duration excludes external operations, such as\nstaging of files, pulling a docker image etc, and only counts\nwall-time for the execution of the command line itself."
                    },
                    "SubworkflowFeatureRequirementMap": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "description": "Indicates that the workflow platform must support nested workflows in\nthe `run` field of [WorkflowStep](#WorkflowStep)."
                    },
                    "ScatterFeatureRequirementMap": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "description": "Indicates that the workflow platform must support the `scatter` and\n`scatterMethod` fields of [WorkflowStep](#WorkflowStep)."
                    },
                    "MultipleInputFeatureRequirementMap": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "description": "Indicates that the workflow platform must support multiple inbound data links\nlisted in the `source` field of [WorkflowStepInput](#WorkflowStepInput)."
                    },
                    "StepInputExpressionRequirementMap": {
                      "type": "object",
                      "properties": {},
                      "required": [],
                      "description": "Indicate that the workflow platform must support the `valueFrom` field\nof [WorkflowStepInput](#WorkflowStepInput)."
                    },
                    "CWLFile": {
                      "type": "object",
                      "allOf": [
                        {
                          "oneOf": [
                            {
                              "$ref": "#/definitions/Workflow"
                            },
                            {
                              "$ref": "#/definitions/CommandLineTool"
                            },
                            {
                              "$ref": "#/definitions/ExpressionTool"
                            }
                          ]
                        },
                        {
                          "oneOf": [
                            {
                              "$ref": "#/definitions/CWLDocumentMetadata"
                            }
                          ]
                        }
                      ],
                      "properties": {
                        "expression": true,
                        "outputs": true,
                        "permanentFailCodes": true,
                        "successCodes": true,
                        "baseCommand": true,
                        "$namespaces": true,
                        "id": true,
                        "label": true,
                        "stdout": true,
                        "requirements": true,
                        "inputs": true,
                        "intent": true,
                        "$schemas": true,
                        "stdin": true,
                        "steps": true,
                        "cwlVersion": true,
                        "stderr": true,
                        "doc": true,
                        "hints": true,
                        "class": true,
                        "temporaryFailCodes": true,
                        "arguments": true
                      },
                      "patternProperties": {
                        "^\\w+:.*$": {
                          "type": "object"
                        },
                        "^\\w+:\\/\\/.*": {
                          "type": "object"
                        }
                      },
                      "additionalProperties": false
                    },
                    "CWLGraph": {
                      "type": "object",
                      "properties": {
                        "$graph": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/CWLFile"
                          }
                        },
                        "cwlVersion": {
                          "description": "CWL document version. Always required at the document root. Not\nrequired for a Process embedded inside another Process.",
                          "enum": [
                            "draft-2",
                            "draft-3",
                            "draft-3.dev1",
                            "draft-3.dev2",
                            "draft-3.dev3",
                            "draft-3.dev4",
                            "draft-3.dev5",
                            "draft-4.dev1",
                            "draft-4.dev2",
                            "draft-4.dev3",
                            "v1.0",
                            "v1.0.dev4",
                            "v1.1",
                            "v1.1.0-dev1",
                            "v1.2",
                            "v1.2.0-dev1",
                            "v1.2.0-dev2",
                            "v1.2.0-dev3",
                            "v1.2.0-dev4",
                            "v1.2.0-dev5"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "$graph"
                      ]
                    },
                    "CWLGraphOrFile": {
                      "type": "object",
                      "additionalProperties": false,
                      "allOf": [
                        {
                          "oneOf": [
                            {
                              "$ref": "#/definitions/CWLGraph"
                            },
                            {
                              "$ref": "#/definitions/CWLFile"
                            }
                          ]
                        },
                        {
                          "$ref": "#/definitions/CWLDocumentMetadata"
                        }
                      ],
                      "properties": {
                        "expression": true,
                        "outputs": true,
                        "permanentFailCodes": true,
                        "successCodes": true,
                        "baseCommand": true,
                        "$graph": true,
                        "$namespaces": true,
                        "id": true,
                        "label": true,
                        "stdout": true,
                        "requirements": true,
                        "inputs": true,
                        "intent": true,
                        "$schemas": true,
                        "stdin": true,
                        "steps": true,
                        "cwlVersion": true,
                        "stderr": true,
                        "doc": true,
                        "hints": true,
                        "class": true,
                        "temporaryFailCodes": true,
                        "arguments": true
                      },
                      "patternProperties": {
                        "^\\w+:.*$": {
                          "type": "object"
                        },
                        "^\\w+:\\/\\/.*": {
                          "type": "object"
                        }
                      }
                    }
                  },
                  "$ref": "#/paths/processes/{processID}/package/get/responses/200/content/application/cwl/schema/definitions/CWLGraphOrFile"
                }
              },
              "application/cwl+json": {
                "schema": {
                  "$ref": "#/paths/processes/{processID}/package/get/responses/200/content/application/cwl/schema"
                }
              },
              "application/cwl+yaml": {
                "schema": {
                  "$ref": "#/paths/processes/{processID}/package/get/responses/200/content/application/cwl/schema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/processes/{processID}/execution": {
      "post": {
        "summary": "execute a process.",
        "description": "Executes a process (this may result in the creation of a job resource e.g., for _asynchronous execution_).\n\nFor more information, see [Section 7.9](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_create_job).\n",
        "operationId": "execute",
        "tags": [
          "Processes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/processID-path"
          },
          {
            "name": "response",
            "in": "query",
            "description": "For executing the process using the _Collection Output_ mechanism, where the client is redirected (_303_ status) to either\nan OGC API landing page or collection resource, from which one or more OGC API data access mechanism is available.\nData access requests may trigger processing on-demand for a given area, time and resolution of interest.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "collection",
                "landingPage"
              ]
            }
          },
          {
            "in": "header",
            "description": "Indicates client preferences, including whether the client is capable of asynchronous processing.\nA `respond-async` preference indicates a preference for asynchronous processing.\nA `wait: <x>s` preference indicates that the client prefers to wait up to x seconds to receive a reponse synchronously before the server falls back to asynchronous processing.",
            "name": "Prefer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An execution request specifying any inputs for the process to execute, and optionally to select specific outputs.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "process": {
                        "type": "string",
                        "format": "uri-reference",
                        "description": "URI to the process execution end point (i.e., `.../processes/{processID}/execution`)"
                      },
                      "inputs": {
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "oneOf": [
                                {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    },
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "boolean"
                                    },
                                    {
                                      "type": "array",
                                      "items": {}
                                    },
                                    {
                                      "$ref": "#/components/schemas/binaryInputValue"
                                    },
                                    {
                                      "$ref": "#/components/schemas/bbox-processes"
                                    },
                                    {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "collection"
                                          ],
                                          "properties": {
                                            "collection": {
                                              "type": "string",
                                              "format": "uri-reference"
                                            }
                                          }
                                        },
                                        {
                                          "$ref": "#/paths/processes/{processID}/execution/post/requestBody/content/application/json/schema/allOf/1"
                                        }
                                      ]
                                    },
                                    {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "process"
                                          ]
                                        },
                                        {
                                          "$ref": "#/paths/processes/{processID/execution/post/requestBody/content/application/json/schema"
                                        }
                                      ]
                                    },
                                    {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "$input"
                                          ],
                                          "properties": {
                                            "$input": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "$ref": "#/paths/processes/{processID}/execution/post/requestBody/content/application/json/schema/allOf/1"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "allOf": [
                                    {
                                      "$ref": "#/components/schemas/format"
                                    },
                                    {
                                      "$ref": "#/paths/processes/{processID}/execution/post/requestBody/content/application/json/schema/allOf/1"
                                    },
                                    {
                                      "type": "object",
                                      "required": [
                                        "value"
                                      ],
                                      "properties": {
                                        "value": {
                                          "oneOf": [
                                            {
                                              "$ref": "#/paths/processes/{processID}/execution/post/requestBody/content/application/json/schema/allOf/0/properties/inputs/additionalProperties/oneOf/0/oneOf/0"
                                            },
                                            {
                                              "type": "object"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "$ref": "#/components/schemas/link"
                                }
                              ]
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/paths/processes/{processID}/execution/post/requestBody/content/application/json/schema/allOf/0/properties/inputs/additionalProperties/oneOf/0"
                              }
                            }
                          ]
                        }
                      },
                      "outputs": {
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "format": {
                              "$ref": "#/components/schemas/format"
                            },
                            "$output": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "subscriber": {
                        "$ref": "#/components/schemas/subscriber"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "string"
                      },
                      "properties": {
                        "oneOf": [
                          {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        ]
                      },
                      "sortBy": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ExecuteSync"
          },
          "201": {
            "$ref": "#/components/responses/ExecuteAsync"
          },
          "204": {
            "$ref": "#/components/responses/EmptyResponse"
          },
          "303": {
            "description": "For _Collection Output_ execution, redirection to an OGC API landing page or collection.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Location for redirection to an  [OGC API landing page](https://schemas.opengis.net/ogcapi/tiles/part1/1.0/openapi/schemas/common-core/landingPage.yaml) (for `response=landingPage`) as described in\n[OGC API - Common - Part 1: Core](http://docs.ogc.org/DRAFTS/19-072.html#_landing_page_requirements_class) or\nan [OGC API collection description](https://schemas.opengis.net/ogcapi/tiles/part1/1.0/openapi/schemas/common-geodata/collectionInfo.yaml) (for `response=landingPage`) as described in\n[OGC API - Common - Part 2: Geospatial data](http://docs.ogc.org/DRAFTS/20-024.html#collection-description).\nThe collection redirected to or the collections linked from the landing page redirected to\nmust contain links to at least one data access mechanism (such as [_OGC API - Tiles_](https://opengeospatial.github.io/ogcna-auto-review/20-057.html),\n[_DGGS_](https://opengeospatial.github.io/ogcna-auto-review/21-038.html),\n[_Coverages_](http://docs.ogc.org/DRAFTS/19-087.html),\n[_Features_](https://docs.opengeospatial.org/is/17-069r4/17-069r4.html),\n[_EDR_](https://docs.ogc.org/is/19-086r5/19-086r5.html), or\n[_Maps_](http://docs.ogc.org/DRAFTS/20-058.html)...) to retrieve output results, which may\ntrigger on-demand processing."
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "callbacks": {
          "jobCompleted": {
            "{$request.body#/subscriber/successUri}": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/results"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Results received successfully"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "retrieve the list of jobs.",
        "description": "Lists available jobs.\n\nFor more information, see [Section 12](https://docs.ogc.org/is/18-062r2/18-062r2.html#Job_list).\n",
        "operationId": "getJobs",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/processID-query"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/minDuration"
          },
          {
            "$ref": "#/components/parameters/maxDuration"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/datetime"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/JobList"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/jobs/{jobID}": {
      "get": {
        "summary": "retrieve the status of a job",
        "description": "Shows the status of a job.\n\n For more information, see [Section 7.10](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_retrieve_status_info).\n",
        "operationId": "getStatus",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/jobID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Status"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "cancel a job execution, remove a finished job",
        "description": "Cancel a job execution and remove it from the jobs list.\n\nFor more information, see [Section 14]https://docs.ogc.org/is/18-062r2/18-062r2.html#Dismiss).\n",
        "operationId": "dismiss",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/jobID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Status"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/jobs/{jobID}/results": {
      "get": {
        "summary": "retrieve the result(s) of a job",
        "description": "Lists available results of a job. In case of a failure, lists exceptions instead.\n\nFor more information, see [Section 7.11](https://docs.ogc.org/is/18-062r2/18-062r2.html#sc_retrieve_job_results).\n",
        "operationId": "getResult",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/jobID"
          },
          {
            "in": "header",
            "description": "Indicates client preferences, such as whether the client wishes a self-contained or minimal response.\nA `return=minimal` preference indicates that the client would prefer that links be returned to larger object to minimize the response payload.\nA `return=representation` indicates that the client would prefer if the server can return a self-contained response.",
            "name": "Prefer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Results"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "confClasses": {
        "type": "object",
        "required": [
          "conformsTo"
        ],
        "properties": {
          "conformsTo": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core"
            }
          }
        }
      },
      "link": {
        "type": "object",
        "required": [
          "href"
        ],
        "properties": {
          "href": {
            "type": "string"
          },
          "rel": {
            "type": "string",
            "example": "service"
          },
          "type": {
            "type": "string",
            "example": "application/json"
          },
          "hreflang": {
            "type": "string",
            "example": "en"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "landingPage": {
        "type": "object",
        "required": [
          "links"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Example processing server"
          },
          "description": {
            "type": "string",
            "example": "Example server implementing the OGC API - Processes 1.0 Standard"
          },
          "attribution": {
            "type": "string",
            "title": "attribution for the Processes API",
            "description": "The `attribution` should be short and intended for presentation to a user, for example, in a corner of a map. Parts of the text can be links to other resources if additional information is needed. The string can include HTML markup."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "exception": {
        "title": "Exception Schema",
        "description": "JSON schema for exceptions based on RFC 7807",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": true
      },
      "collections": {
        "type": "object",
        "required": [
          "links",
          "collections"
        ],
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "numberMatched": {
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "numberReturned": {
            "type": "integer",
            "minimum": 0,
            "example": 1
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionInfo"
            }
          }
        }
      },
      "collectionInfo": {
        "type": "object",
        "required": [
          "id",
          "links"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "identifier of the collection used, for example, in URIs",
            "example": "dem"
          },
          "title": {
            "type": "string",
            "description": "human readable title of the collection",
            "example": "Digital Elevation Model"
          },
          "description": {
            "type": "string",
            "description": "a description of the data in the collection",
            "example": "A Digital Elevation Model."
          },
          "links": {
            "type": "array",
            "example": [
              {
                "href": "http://data.example.org/collections/dem?f=json",
                "rel": "self",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem?f=html",
                "rel": "alternate",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage",
                "rel": "coverage",
                "type": "image/tiff; application=geotiff",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/domainset",
                "rel": "domainset",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/rangetype",
                "rel": "rangetype",
                "type": "application/json",
                "title": "Digital Elevation Model"
              },
              {
                "href": "http://data.example.org/collections/dem/coverage/metadata",
                "rel": "metadata",
                "type": "application/json",
                "title": "Digital Elevation Model"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/link"
            }
          },
          "extent": {
            "$ref": "#/components/schemas/extent-uad"
          },
          "itemType": {
            "description": "indicator about the type of the items in the collection if the collection has an accessible /collections/{collectionId}/items endpoint",
            "type": "string",
            "default": "unknown"
          },
          "crs": {
            "description": "the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
            ],
            "example": [
              "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
              "http://www.opengis.net/def/crs/EPSG/0/4326"
            ]
          },
          "dataType": {
            "allOf": [
              {
                "description": "Type of data represented in the collection"
              },
              {
                "$ref": "#/components/schemas/dataType"
              }
            ]
          },
          "geometryDimension": {
            "description": "The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
            "type": "integer",
            "minimum": 0,
            "maximum": 3
          },
          "minScaleDenominator": {
            "description": "Minimum scale denominator for usage of the collection",
            "type": "number"
          },
          "maxScaleDenominator": {
            "description": "Maximum scale denominator for usage of the collection",
            "type": "number"
          },
          "minCellSize": {
            "description": "Minimum cell size for usage of the collection",
            "type": "number"
          },
          "maxCellSize": {
            "description": "Maximum cell size for usage of the collection",
            "type": "number"
          }
        }
      },
      "extent": {
        "description": "The extent of the data in the collection. In the Core only spatial and temporal\nextents are specified. Extensions may add additional members to represent other\nextents, for example, thermal or pressure ranges.\n\nThe first item in the array describes the overall extent of\nthe data. All subsequent items describe more precise extents,\ne.g., to identify clusters of data.\nClients only interested in the overall extent will only need to\naccess the first item in each array.",
        "type": "object",
        "properties": {
          "spatial": {
            "description": "The spatial extent of the data in the collection.",
            "type": "object",
            "properties": {
              "bbox": {
                "description": "One or more bounding boxes that describe the spatial extent of the dataset.\nIn the Core only a single bounding box is supported.\n\nExtensions may support additional areas.\nThe first bounding box describes the overall spatial\nextent of the data. All subsequent bounding boxes describe\nmore precise bounding boxes, e.g., to identify clusters of data.\nClients only interested in the overall spatial extent will\nonly need to access the first item in each array.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Each bounding box is provided as four or six numbers, depending on\nwhether the coordinate reference system includes a vertical axis\n(height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in a parameter `bbox-crs`.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
                  "type": "array",
                  "oneOf": [
                    {
                      "minItems": 4,
                      "maxItems": 4
                    },
                    {
                      "minItems": 6,
                      "maxItems": 6
                    }
                  ],
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    -180,
                    -90,
                    180,
                    90
                  ]
                }
              },
              "crs": {
                "description": "Coordinate reference system of the coordinates in the spatial extent\n(property `bbox`). The default reference system is WGS 84 longitude/latitude.\nIn the Core the only other supported coordinate reference system is\nWGS 84 longitude/latitude/ellipsoidal height for coordinates with height.\nExtensions may support additional coordinate reference systems and add\nadditional enum values.",
                "type": "string",
                "enum": [
                  "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                  "http://www.opengis.net/def/crs/OGC/0/CRS84h"
                ],
                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
              },
              "grid": {
                "description": "Provides information about the limited availability of data within the collection organized\nas a grid (regular or irregular) along each spatial dimension.",
                "type": "array",
                "minItems": 2,
                "maxItems": 3,
                "items": {
                  "type": "object",
                  "properties": {
                    "coordinates": {
                      "description": "List of coordinates along the dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ]
                    },
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "type": "integer",
                      "example": 50
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "example": 0.0006866455078
                    }
                  }
                }
              }
            }
          },
          "temporal": {
            "description": "The temporal extent of the features in the collection.",
            "type": "object",
            "properties": {
              "interval": {
                "description": "One or more time intervals that describe the temporal extent of the dataset.\nIn the Core only a single time interval is supported.\n\nExtensions may support multiple intervals.\nThe first time interval describes the overall\ntemporal extent of the data. All subsequent time intervals describe\nmore precise time intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item in each array.",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Begin and end times of the time interval. The timestamps are in the\ntemporal coordinate reference system specified in `trs`. By default\nthis is the Gregorian calendar.\n\nThe value `null` for start or end time is supported and indicates a half-bounded time interval.",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "example": [
                    "2011-11-11T12:22:11Z",
                    null
                  ]
                }
              },
              "trs": {
                "description": "Coordinate reference system of the coordinates in the temporal extent\n(property `interval`). The default reference system is the Gregorian calendar.\nIn the Core this is the only supported temporal coordinate reference system.\nExtensions may support additional temporal coordinate reference systems and add\nadditional enum values.",
                "type": "string",
                "enum": [
                  "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                ],
                "default": "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
              },
              "grid": {
                "type": "object",
                "description": "Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the temporal dimension.",
                "properties": {
                  "coordinates": {
                    "description": "List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available\n(e.g., \"2017-11-14T09:00Z\",\"2017-11-14T12:00Z\",\"2017-11-14T15:00Z\",\"2017-11-14T18:00Z\",\"2017-11-14T21:00Z\").",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "nullable": true
                    },
                    "example": [
                      [
                        "2020-11-12T12:15Z",
                        "2020-11-12T12:30Z",
                        "2020-11-12T12:45Z"
                      ]
                    ]
                  },
                  "cellsCount": {
                    "description": "Number of samples available along the temporal dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                    "type": "integer",
                    "example": 50
                  },
                  "resolution": {
                    "description": "Resolution of regularly gridded data along the temporal dimension in the collection",
                    "oneOf": [
                      {
                        "type": "string",
                        "nullable": true
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "example": "PT1H"
                  }
                }
              }
            }
          }
        }
      },
      "extent-uad": {
        "title": "Extent with Uniform Additional Dimensions Schema",
        "description": "The extent module only addresses spatial and temporal extents. This module extends extent by specifying how\nintervals and crs properties can be used to specify additional geometries.",
        "allOf": [
          {
            "$ref": "#/components/schemas/extent"
          },
          {
            "type": "object",
            "additionalProperties": {
              "description": "The domain intervals for any additional dimensions of the extent (envelope) beyond those described in temporal and spatial.",
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "interval",
                    "crs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "trs"
                  ]
                },
                {
                  "required": [
                    "interval",
                    "vrs"
                  ]
                }
              ],
              "properties": {
                "interval": {
                  "description": "One or more intervals that describe the extent for this dimension of the dataset.\nThe value `null` is supported and indicates an unbounded or half-bounded interval.\nThe first interval describes the overall extent of the data for this dimension.\nAll subsequent intervals describe more precise intervals, e.g., to identify clusters of data.\nClients only interested in the overall extent will only need\nto access the first item (a pair of lower and upper bound values).",
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "Lower and upper bound values of the interval. The values\nare in the coordinate reference system specified in `crs`, `trs` or `vrs`.",
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "example": [
                      "2011-11-11T12:22:11Z",
                      32.5,
                      null
                    ]
                  }
                },
                "crs": {
                  "type": "string",
                  "description": "generic coordinate reference system suitable for any type of dimensions"
                },
                "trs": {
                  "type": "string",
                  "description": "temporal coordinate reference system (e.g. as defined by Features for 'temporal')"
                },
                "vrs": {
                  "type": "string",
                  "description": "vertical coordinate reference system (e.g. as defined in EDR for 'vertical')"
                },
                "grid": {
                  "type": "object",
                  "description": "Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along the dimension.",
                  "properties": {
                    "coordinates": {
                      "description": "List of coordinates along the temporal dimension for which data organized as an irregular grid in the collection is available\n(e.g., 2, 10, 80, 100).",
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                            "nullable": true
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "example": [
                        2,
                        10,
                        80,
                        100
                      ]
                    },
                    "cellsCount": {
                      "description": "Number of samples available along the dimension for data organized as a regular grid.\nFor values representing the whole area of contiguous cells spanning _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_.\nFor values representing infinitely small point cells spaced by _resolution_ units along the dimension, this will be (_upperBound_ - _lowerBound_) / _resolution_ + 1.",
                      "type": "integer",
                      "example": 50
                    },
                    "resolution": {
                      "description": "Resolution of regularly gridded data along the dimension in the collection",
                      "oneOf": [
                        {
                          "type": "string",
                          "nullable": true
                        },
                        {
                          "type": "number"
                        }
                      ],
                      "example": [
                        "PT1H",
                        0.0006866455078
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "crs": {
        "title": "CRS",
        "oneOf": [
          {
            "description": "Simplification of the object into a url if the other properties are not present",
            "type": "string"
          },
          {
            "type": "object",
            "oneOf": [
              {
                "required": [
                  "uri"
                ],
                "properties": {
                  "uri": {
                    "description": "Reference to one coordinate reference system (CRS)",
                    "type": "string",
                    "format": "uri"
                  }
                }
              },
              {
                "required": [
                  "wkt"
                ],
                "properties": {
                  "wkt": {
                    "allOf": [
                      {
                        "description": "An object defining the CRS using the JSON encoding for Well-known text representation of coordinate reference systems 2.0"
                      },
                      {
                        "type": "object"
                      }
                    ]
                  }
                }
              },
              {
                "required": [
                  "referenceSystem"
                ],
                "properties": {
                  "referenceSystem": {
                    "description": "A reference system data structure as defined in the MD_ReferenceSystem of the ISO 19115",
                    "type": "object"
                  }
                }
              }
            ]
          }
        ]
      },
      "dataType": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
              "map",
              "vector",
              "coverage"
            ]
          }
        ]
      },
      "timeStamp": {
        "description": "This property indicates the time and date when the response was generated using RFC 3339 notation.",
        "type": "string",
        "format": "date-time",
        "example": "2017-08-17T08:05:32Z"
      },
      "numberReturned": {
        "description": "The number of features in the feature collection.\nA server may omit this information in a response, if the information\nabout the number of features is not known or difficult to compute.\nIf the value is provided, the value shall be identical to the number\nof items in the \"features\" array.",
        "type": "integer",
        "minimum": 0,
        "example": 10
      },
      "numberMatched": {
        "description": "The number of features of the feature type that match the selection\nparameters like `bbox`.",
        "type": "integer",
        "minimum": 0,
        "example": 127
      },
      "enumeration": {
        "type": "object",
        "required": [
          "type",
          "enum"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "enum"
            ]
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "processes-list": {
        "type": "string",
        "enum": [
          "RenderMap",
          "ElevationContours",
          "OSMERE"
        ]
      },
      "processSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/descriptionType"
          },
          {
            "type": "object",
            "required": [
              "id",
              "version"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "jobControlOptions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/jobControlOptions"
                }
              },
              "links": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/link"
                }
              }
            }
          }
        ]
      },
      "process": {
        "allOf": [
          {
            "$ref": "#/components/schemas/processSummary"
          },
          {
            "type": "object",
            "properties": {
              "inputs": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/inputDescription"
                }
              },
              "outputs": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/outputDescription"
                }
              }
            }
          }
        ]
      },
      "processList": {
        "type": "object",
        "required": [
          "processes",
          "links"
        ],
        "properties": {
          "processes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/processSummary"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "jobList": {
        "type": "object",
        "required": [
          "jobs",
          "links"
        ],
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/statusInfo"
            }
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "bbox-processes": {
        "type": "object",
        "required": [
          "bbox"
        ],
        "properties": {
          "bbox": {
            "type": "array",
            "oneOf": [
              {
                "minItems": 4,
                "maxItems": 4
              },
              {
                "minItems": 6,
                "maxItems": 6
              }
            ],
            "items": {
              "type": "number"
            }
          },
          "crs": {
            "anyOf": [
              {
                "type": "string",
                "format": "uri",
                "enum": [
                  "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                  "http://www.opengis.net/def/crs/OGC/0/CRS84h"
                ],
                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
              },
              {
                "type": "string",
                "format": "uri",
                "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
              }
            ]
          }
        }
      },
      "descriptionType": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/metadata"
            }
          }
        }
      },
      "binaryInputValue": {
        "type": "string",
        "format": "byte"
      },
      "execute": {
        "type": "object",
        "properties": {
          "inputs": {
            "additionalProperties": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inlineOrRefData"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inlineOrRefData"
                  }
                }
              ]
            }
          },
          "outputs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/output"
            }
          },
          "subscriber": {
            "$ref": "#/components/schemas/subscriber"
          }
        }
      },
      "format": {
        "type": "object",
        "properties": {
          "mediaType": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "schema": {
            "oneOf": [
              {
                "type": "string",
                "format": "url"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      },
      "inputDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/descriptionType"
          },
          {
            "type": "object",
            "required": [
              "schema"
            ],
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/schema"
              },
              "minOccurs": {
                "type": "integer",
                "default": 1
              },
              "maxOccurs": {
                "oneOf": [
                  {
                    "type": "integer",
                    "default": 1
                  },
                  {
                    "type": "string",
                    "enum": [
                      "unbounded"
                    ]
                  }
                ]
              },
              "valuePassing": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "byValue",
                    "byReference"
                  ]
                },
                "default": [
                  "byValue",
                  "byReference"
                ]
              }
            }
          }
        ]
      },
      "inputValue": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/inputValueNoObject"
          },
          {
            "type": "object"
          }
        ]
      },
      "inputValueNoObject": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "integer"
          },
          {
            "type": "boolean"
          },
          {
            "type": "array",
            "items": {}
          },
          {
            "$ref": "#/components/schemas/binaryInputValue"
          },
          {
            "$ref": "#/components/schemas/bbox-processes"
          }
        ]
      },
      "jobControlOptions": {
        "type": "string",
        "enum": [
          "sync-execute",
          "async-execute",
          "dismiss"
        ]
      },
      "metadata": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/link"
              },
              {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "lang": {
                "type": "string"
              },
              "value": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            }
          }
        ]
      },
      "output": {
        "type": "object",
        "properties": {
          "format": {
            "$ref": "#/components/schemas/format"
          }
        }
      },
      "outputDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/descriptionType"
          },
          {
            "type": "object",
            "required": [
              "schema"
            ],
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/schema"
              }
            }
          }
        ]
      },
      "qualifiedInputValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/format"
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "$ref": "#/components/schemas/inputValue"
              }
            }
          }
        ]
      },
      "reference": {
        "type": "object",
        "required": [
          "$ref"
        ],
        "properties": {
          "$ref": {
            "type": "string",
            "format": "uri-reference"
          }
        },
        "additionalProperties": false
      },
      "results": {
        "additionalProperties": {
          "$ref": "#/components/schemas/inlineOrRefData"
        }
      },
      "schema": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/reference"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "multipleOf": {
                "type": "number",
                "minimum": 0,
                "exclusiveMinimum": true
              },
              "maximum": {
                "type": "number"
              },
              "exclusiveMaximum": {
                "type": "boolean",
                "default": false
              },
              "minimum": {
                "type": "number"
              },
              "exclusiveMinimum": {
                "type": "boolean",
                "default": false
              },
              "maxLength": {
                "type": "integer",
                "minimum": 0
              },
              "minLength": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "pattern": {
                "type": "string",
                "format": "regex"
              },
              "maxItems": {
                "type": "integer",
                "minimum": 0
              },
              "minItems": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "uniqueItems": {
                "type": "boolean",
                "default": false
              },
              "maxProperties": {
                "type": "integer",
                "minimum": 0
              },
              "minProperties": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "required": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 1,
                "uniqueItems": true
              },
              "enum": {
                "type": "array",
                "items": {},
                "minItems": 1,
                "uniqueItems": false
              },
              "type": {
                "type": "string",
                "enum": [
                  "array",
                  "boolean",
                  "integer",
                  "number",
                  "object",
                  "string"
                ]
              },
              "not": {
                "$ref": "#/components/schemas/schema"
              },
              "allOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema"
                }
              },
              "oneOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema"
                }
              },
              "anyOf": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema"
                }
              },
              "items": {
                "$ref": "#/components/schemas/schema"
              },
              "properties": {
                "type": "object",
                "properties": {},
                "additionalProperties": {
                  "$ref": "#/components/schemas/schema"
                }
              },
              "additionalProperties": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema"
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "default": true
              },
              "description": {
                "type": "string"
              },
              "format": {
                "type": "string"
              },
              "default": {},
              "nullable": {
                "type": "boolean",
                "default": false
              },
              "readOnly": {
                "type": "boolean",
                "default": false
              },
              "writeOnly": {
                "type": "boolean",
                "default": false
              },
              "example": {},
              "deprecated": {
                "type": "boolean",
                "default": false
              },
              "contentMediaType": {
                "type": "string"
              },
              "contentEncoding": {
                "type": "string"
              },
              "contentSchema": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "statusCode": {
        "type": "string",
        "nullable": false,
        "enum": [
          "accepted",
          "running",
          "successful",
          "failed",
          "dismissed"
        ]
      },
      "subscriber": {
        "description": "Optional URIs for callbacks for this job.\n\nSupport for this parameter is not required and the parameter may be\nremoved from the API definition, if conformance class **'callback'**\nis not listed in the conformance declaration under `/conformance`.",
        "type": "object",
        "required": [
          "successUri"
        ],
        "properties": {
          "successUri": {
            "type": "string",
            "format": "uri"
          },
          "inProgressUri": {
            "type": "string",
            "format": "uri"
          },
          "failedUri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "inlineOrRefData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/inputValueNoObject"
          },
          {
            "$ref": "#/components/schemas/qualifiedInputValue"
          },
          {
            "$ref": "#/components/schemas/link"
          }
        ]
      },
      "statusInfo": {
        "type": "object",
        "required": [
          "jobID",
          "status",
          "type"
        ],
        "properties": {
          "processID": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "process"
            ]
          },
          "jobID": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/statusCode"
          },
          "message": {
            "type": "string"
          },
          "exception": {
            "$ref": "#/components/schemas/exception"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "started": {
            "type": "string",
            "format": "date-time"
          },
          "finished": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            }
          }
        }
      },
      "ogcapppkg": {
        "type": "object",
        "required": [
          "executionUnit"
        ],
        "properties": {
          "processDescription": {
            "$ref": "#/components/schemas/process"
          },
          "executionUnit": {
            "oneOf": [
              {
                "description": "Resource containing an executable or runtime information for executing the process.",
                "type": "object",
                "required": [
                  "type",
                  "image"
                ],
                "properties": {
                  "type": {
                    "description": "Type of execution unit.",
                    "type": "string",
                    "enum": [
                      "docker",
                      "oci"
                    ]
                  },
                  "image": {
                    "description": "Container image reference for the execution unit.",
                    "type": "string"
                  },
                  "deployment": {
                    "description": "Deployment information for the execution unit.",
                    "type": "string",
                    "enum": [
                      "local",
                      "remote",
                      "hpc",
                      "cloud"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "description": "Hardware requirements and configuration properties for executing the process.",
                    "properties": {
                      "cpuMin": {
                        "description": "Minimum number of CPUs required to run the process (unit is CPU core).",
                        "type": "number",
                        "minimum": 1
                      },
                      "cpuMax": {
                        "description": "Maximum number of CPU dedicated to the process (unit is CPU core)",
                        "type": "number"
                      },
                      "memoryMin": {
                        "description": "Minimum RAM memory required to run the application (unit is GB)",
                        "type": "number"
                      },
                      "memoryMax": {
                        "description": "Maximum RAM memory dedicated to the application (unit is GB)",
                        "type": "number"
                      },
                      "storageTempMin": {
                        "description": "Minimum required temporary storage size (unit is GB)",
                        "type": "number"
                      },
                      "storageOutputsMin": {
                        "description": "Minimum required output storage size (unit is GB)",
                        "type": "number"
                      },
                      "jobTimeout": {
                        "description": "Timeout delay for a job execution (in seconds)",
                        "type": "number"
                      }
                    },
                    "additionalProperties": true
                  }
                },
                "additionalProperties": true,
                "example": {
                  "type": "docker",
                  "image": "mydocker/ndvi:latest",
                  "deployment": "local",
                  "config": {
                    "cpuMin": 2,
                    "cpuMax": 5,
                    "memoryMin": 1,
                    "memoryMax": 3
                  }
                }
              },
              {
                "$ref": "#/components/schemas/link"
              },
              {
                "$ref": "#/components/schemas/qualifiedInputValue"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ogcapppkg/properties/executionUnit/oneOf/0"
                    },
                    {
                      "$ref": "#/components/schemas/link"
                    },
                    {
                      "$ref": "#/components/schemas/qualifiedInputValue"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "staticIndicator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/processSummary"
          },
          {
            "type": "object",
            "properties": {
              "mutable": {
                "type": "boolean",
                "default": true
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "f-metadata": {
        "name": "f",
        "in": "query",
        "description": "The format of the response. If no value is provided, the accept header is used to determine the format. Accepted values are 'json' or 'html'.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "html"
          ]
        },
        "style": "form",
        "explode": false
      },
      "datetime": {
        "name": "datetime",
        "in": "query",
        "description": "Either a date-time or an interval, half-bounded or bounded. Date and time expressions\nadhere to RFC 3339. Half-bounded intervals are expressed using double-dots.\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form",
        "explode": false
      },
      "crs": {
        "name": "crs",
        "in": "query",
        "description": "reproject the output to the given crs",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "subset-crs": {
        "name": "subset-crs",
        "in": "query",
        "description": "crs for the specified subset",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "processID-path": {
        "name": "processID",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/processes-list"
        }
      },
      "outputID": {
        "name": "outputID",
        "in": "path",
        "description": "identifier of an output",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "jobID": {
        "name": "jobID",
        "in": "path",
        "description": "local identifier of a job",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "processID-query": {
        "name": "processID",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "output": {
        "name": "output",
        "in": "query",
        "required": false,
        "schema": {
          "type": "object",
          "required": [
            "output"
          ],
          "properties": {
            "output": {
              "type": "string"
            },
            "mediaType": {
              "type": "string"
            },
            "encoding": {
              "type": "string"
            },
            "schema": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "url"
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        },
        "explode": false
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 10
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "process"
            ]
          }
        }
      },
      "status": {
        "name": "status",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/statusCode"
          }
        }
      },
      "minDuration": {
        "name": "minDuration",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "maxDuration": {
        "name": "maxDuration",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "w": {
        "name": "w",
        "description": "Point to the workflow identifier for deploying a CWL containing multiple workflow definitions",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "NotAcceptable": {
        "description": "Content negotiation failed. For example, the `Accept` header submitted in the request did not support any of the media types supported by the server for the requested resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ServerError": {
        "description": "A server error occurred.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "InvalidParameter": {
        "description": "A query parameter has an invalid value.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "NotAllowed": {
        "description": "The method is not allowed at the path.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Exception": {
        "description": "An error occured.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "LandingPage": {
        "description": "The landing page provides links to the API definition (link relation `service-desc`, in this case path `/api`),\nto the Conformance declaration (path `/conformance`, link relation `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other resources.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/landingPage"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Conformance": {
        "description": "The URIs of all conformance classes supported by the server\n\nTo support \"generic\" clients that want to access multiple\nOGC API - Processes implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements and conforms to.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/confClasses"
                }
              ],
              "example": {
                "conformsTo": [
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html",
                  "http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30",
                  "http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections",
                  "http://www.opengis.net/spec/ogcapi-processes-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/nested-processes",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-core-processes",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-input",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/remote-collections",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/input-fields-modifiers",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/output-fields-modifiers",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/deployable-workflows",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/collection-output",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/cwl-workflows",
                  "http://www.opengis.net/spec/ogcapi-processes-3/0.0/conf/openeo-workflows",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets-list",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-tilesets",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/dataset-tilesets",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geodata-selection",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/jpeg",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/png",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/mvt",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/geojson",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tiff",
                  "http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/netcdf"
                ]
              }
            }
          }
        }
      },
      "API": {
        "description": "The OpenAPI definition of the API.",
        "content": {
          "application/vnd.oai.openapi+json;version=3.0": {
            "schema": {
              "type": "object"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Enumeration": {
        "description": "An enumerated list of valid string values for API parameters.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/enumeration"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ProcessList": {
        "description": "Information about the available processes",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/processList"
            }
          }
        }
      },
      "ProcessDescription": {
        "description": "A process description.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/process"
            }
          }
        }
      },
      "Results": {
        "description": "The processing results of a job.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/results"
            }
          }
        }
      },
      "Status": {
        "description": "The status of a job.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/statusInfo"
            }
          }
        }
      },
      "JobList": {
        "description": "A list of jobs for this process.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/jobList"
            }
          }
        }
      },
      "ExecuteAsync": {
        "description": "Started asynchronous execution. Created job.",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "URL to check the status of the execution/job."
          },
          "Preference-Applied": {
            "schema": {
              "type": "string"
            },
            "description": "The preference applied to execute the process asynchronously (see. RFC 2740)."
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/statusInfo"
            }
          }
        }
      },
      "ExecuteSync": {
        "description": "Result of synchronous execution",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "object",
                  "nullable": true
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "format": "binary"
                },
                {
                  "$ref": "#/components/schemas/results"
                }
              ]
            }
          },
          "image/png": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "image/jpeg": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "image/tiff; application=geotiff": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "application/geo+json": {
            "schema": {
              "allOf": [
                {
                  "format": "geojson-feature-collection"
                },
                {
                  "title": "GeoJSON FeatureCollection",
                  "type": "object",
                  "required": [
                    "type",
                    "features"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "FeatureCollection"
                      ]
                    },
                    "features": {
                      "type": "array",
                      "items": {
                        "title": "GeoJSON Feature",
                        "type": "object",
                        "required": [
                          "type",
                          "properties",
                          "geometry"
                        ],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "Feature"
                            ]
                          },
                          "id": {
                            "oneOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "properties": {
                            "type": "object",
                            "nullable": true
                          },
                          "geometry": {
                            "oneOf": [
                              {
                                "title": "GeoJSON Point",
                                "type": "object",
                                "nullable": true,
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "Point"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                      "type": "number"
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              {
                                "title": "GeoJSON LineString",
                                "type": "object",
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "LineString"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "minItems": 2,
                                    "items": {
                                      "type": "array",
                                      "minItems": 2,
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              {
                                "title": "GeoJSON Polygon",
                                "type": "object",
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "Polygon"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "minItems": 4,
                                      "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              {
                                "title": "GeoJSON MultiPoint",
                                "type": "object",
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "MultiPoint"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "minItems": 2,
                                      "items": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              {
                                "title": "GeoJSON MultiLineString",
                                "type": "object",
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "MultiLineString"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "minItems": 2,
                                      "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "items": {
                                          "type": "number"
                                        }
                                      }
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              {
                                "title": "GeoJSON MultiPolygon",
                                "type": "object",
                                "required": [
                                  "type",
                                  "coordinates"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "MultiPolygon"
                                    ]
                                  },
                                  "coordinates": {
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "array",
                                        "minItems": 4,
                                        "items": {
                                          "type": "array",
                                          "minItems": 2,
                                          "items": {
                                            "type": "number"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "bbox": {
                                    "type": "array",
                                    "minItems": 4,
                                    "items": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "bbox": {
                            "type": "array",
                            "minItems": 4,
                            "items": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    "bbox": {
                      "type": "array",
                      "minItems": 4,
                      "items": {
                        "type": "number"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ExecuteSyncRawRef": {
        "description": "Synchronous execution response.",
        "headers": {
          "Link": {
            "schema": {
              "type": "string"
            },
            "description": "One or more Link headers pointing to each raw output."
          }
        }
      },
      "EmptyResponse": {
        "description": "successful operation (no response body)"
      },
      "DeployProcess": {
        "description": "the process is deployed",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "URL to fetch the processDescription of the deployed process"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/staticIndicator"
            }
          }
        }
      },
      "DuplicateProcess": {
        "description": "the processes being added is already deployed (i.e. duplicate)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "ImmutableProcess": {
        "description": "the processes is not mutable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/exception"
            }
          },
          "text/html": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}

